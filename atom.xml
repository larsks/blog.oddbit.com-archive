<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Odd Bit on The Odd Bit</title>

  
  <link rel="self" href="http://blog.oddbit.com/atom.xml"/>
  
  <link href="http://blog.oddbit.com/" rel="alternate"></link>                                      â”‚1557152283 127.0.0.1 "GET /dist/styles.css" 304 136 "http://localhost:1313/" "Mozilla/5.0 (X11;

  <updated>2019-05-07T00:00:00Z</updated>
  <id>http://blog.oddbit.com/</id>
  
  <entry>
    <title>Unpacking a Python regular expression</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-05-07-unpacking-a-python-regular-exp/"/>
    <id>http://blog.oddbit.com/post/2019-05-07-unpacking-a-python-regular-exp/</id>
    <published>2019-05-07T00:00:00Z</published>
    <updated>2019-05-07T00:00:00Z</updated>
    <summary>I recently answered a question from Harsha Nalore on StackOverflow that involved using Ansible to extract the output of a command sent to a BigIP device of some sort. My solution &amp;ndash; which I claim to be functional, but probably not optimal &amp;ndash; involved writing an Ansible filter module to parse the output. That filter made use of a complex-looking regular expression. Harsha asked for some details on that regular expression works, and the existing StackOverflow answer didn&amp;rsquo;t really seem the write place for that: so, here we are.</summary>
  </entry>
  
  <entry>
    <title>New comment system</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-05-07-new-comment-system/"/>
    <id>http://blog.oddbit.com/post/2019-05-07-new-comment-system/</id>
    <published>2019-05-07T00:00:00Z</published>
    <updated>2019-05-07T00:00:00Z</updated>
    <summary>As long as I&amp;rsquo;m switching site generators, it seems like a good idea to refresh the comment system as well. I&amp;rsquo;ve been using Disqus for a while, since when I started it was one of the only games in town. There are now alternatives of different sorts, and one in particular caught my eye: Utterances uses GitHub issues for storing comments, which seems like a fantastic idea.
That means that comments will finally be stored in the same place as the blog content, which I think is a happy state of affairs.</summary>
  </entry>
  
  <entry>
    <title>New static site generator</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-05-06-new-static-site-generator/"/>
    <id>http://blog.oddbit.com/post/2019-05-06-new-static-site-generator/</id>
    <published>2019-05-06T00:00:00Z</published>
    <updated>2019-05-06T00:00:00Z</updated>
    <summary>I&amp;rsquo;ve switched my static site generator from Pelican to Hugo. I&amp;rsquo;ve tried to ensure that all the old links continue to work correctly, but if you notice anything missing or otherwise not working as intended, please let me know by opening an issue. Thanks!</summary>
  </entry>
  
  <entry>
    <title>Adding support for privilege escalation to Ansible&#39;s docker connection driver</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-04-26-adding-support-for-privilege-e/"/>
    <id>http://blog.oddbit.com/post/2019-04-26-adding-support-for-privilege-e/</id>
    <published>2019-04-26T00:00:00Z</published>
    <updated>2019-04-26T00:00:00Z</updated>
    <summary>I often use Docker to test out Ansible playbooks. While normally that works great, I recently ran into an unexpected problem with privilege escalation. Given a simple playbook like this:
--- - hosts: all gather_facts: false become: true tasks: - ping:  And an inventory like this:
all: vars: ansible_user: example ansible_connection: docker hosts: server1: ansible_host: sudostuff_server1_1 server2: ansible_host: sudostuff_server2_1 server3: ansible_host: sudostuff_server3_1  And containers with sudo configured to require a password, Ansible would fail like this (note that I&amp;rsquo;ve configured Ansible to use the debug plugin for stdout_callback):</summary>
  </entry>
  
  <entry>
    <title>Writing Ansible filter plugins</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-04-25-writing-ansible-filter-plugins/"/>
    <id>http://blog.oddbit.com/post/2019-04-25-writing-ansible-filter-plugins/</id>
    <published>2019-04-25T00:00:00Z</published>
    <updated>2019-04-25T00:00:00Z</updated>
    <summary>I often see questions from people who are attemping to perform complex text transformations in their Ansible playbooks. While I am a huge fan of Ansible, data transformation is not one of its strong points. For example, this past week someone asked a question on Stack Overflow in which they were attempting to convert the output of the keytool command into a list of dictionaries. The output of the keytool -list -v command looks something like this:</summary>
  </entry>
  
  <entry>
    <title>Docker build learns about secrets and ssh agent forwarding</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-02-24-docker-build-learns-about-secr/"/>
    <id>http://blog.oddbit.com/post/2019-02-24-docker-build-learns-about-secr/</id>
    <published>2019-02-24T00:00:00Z</published>
    <updated>2019-02-24T00:00:00Z</updated>
    <summary>A common problem for folks working with Docker is accessing resources which require authentication during the image build step. A particularly common use case is getting access to private git repositories using ssh key-based authentication. Until recently there hasn&amp;rsquo;t been a great solution:
 you can embed secrets in your image, but now you can&amp;rsquo;t share the image with anybody. you can use build arguments, but this requires passing in an unenecrypted private key on the docker build command line, which is suboptimal for a number of reasons you can perform all the steps requiring authentication at runtime, but this can needlessly complicate your container startup process.</summary>
  </entry>
  
  <entry>
    <title>In which I PEBKAC so you don&#39;t have to</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-02-11-in-which-i-pebkac-so-you-dont-/"/>
    <id>http://blog.oddbit.com/post/2019-02-11-in-which-i-pebkac-so-you-dont-/</id>
    <published>2019-02-11T00:00:00Z</published>
    <updated>2019-02-11T00:00:00Z</updated>
    <summary>Say you have a simple bit of code:
#include &amp;lt;avr/io.h&amp;gt; #include &amp;lt;util/delay.h&amp;gt; #define LED_BUILTIN _BV(PORTB5) int main(void) { DDRB |= LED_BUILTIN; while (1) { PORTB |= LED_BUILTIN; // turn on led _delay_ms(1000); // delay 1s PORTB &amp;amp;= ~LED_BUILTIN; // turn off led _delay_ms(1000); // delay 1s } }  You have a Makefile that compiles that into an object (.o) file like this:
avr-gcc -mmcu=atmega328p -DF_CPU=16000000 -Os -c blink.c  If you were to forget to set the device type when compiling your .</summary>
  </entry>
  
  <entry>
    <title>ATOMIC_BLOCK magic in avr-libc</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-02-01-atomicblock-magic-in-avrlibc/"/>
    <id>http://blog.oddbit.com/post/2019-02-01-atomicblock-magic-in-avrlibc/</id>
    <published>2019-02-01T00:00:00Z</published>
    <updated>2019-02-01T00:00:00Z</updated>
    <summary>The AVR C library, avr-libc, provide an ATOMIC_BLOCK macro that you can use to wrap critical sections of your code to ensure that interrupts are disabled while the code executes. At high level, the ATOMIC_BLOCK macro (when called using ATOMIC_FORCEON) does something like this:
cli(); ...your code here... seti();  But it&amp;rsquo;s more than that. If you read the documentation for the macro, it says:
 Creates a block of code that is guaranteed to be executed atomically.</summary>
  </entry>
  
  <entry>
    <title>AVR micro-optimization: Avr-gcc and --short-enums</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-28-avr-gcc-short-enums/"/>
    <id>http://blog.oddbit.com/post/2019-01-28-avr-gcc-short-enums/</id>
    <published>2019-01-28T00:00:00Z</published>
    <updated>2019-01-28T00:00:00Z</updated>
    <summary>How big is an enum? I noticed something odd while browsing through the assembly output of some AVR C code I wrote recently. In the code, I have the following expression:
int main() { setup(); while (state != STATE_QUIT) { loop(); } }  Here, state is a variable of type enum STATE, which looks something like this (not exactly like this; there are actually 19 possible values but I didn&amp;rsquo;t want to clutter this post with unnecessary code listings):</summary>
  </entry>
  
  <entry>
    <title>AVR micro-optimization: Losing malloc</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-28-losing-malloc/"/>
    <id>http://blog.oddbit.com/post/2019-01-28-losing-malloc/</id>
    <published>2019-01-28T00:00:00Z</published>
    <updated>2019-01-28T00:00:00Z</updated>
    <summary>Pssst! Hey&amp;hellip;hey, buddy, wanna get an extra KB for cheap?
When write OO-style code in C, I usually start with something like the following, in which I use malloc() to allocate memory for a variable of a particular type, perform some initialization actions, and then return it to the caller:
Button *button_new(uint8_t pin, uint8_t poll_freq) { Button *button = (Button *)malloc(sizeof(Button)); // do some initialization stuff return button; }  And when initially writing pipower, that&amp;rsquo;s exactly what I did.</summary>
  </entry>
  
  <entry>
    <title>Debugging attiny85 code, part 1: simavr and gdb</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-1/"/>
    <id>http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-1/</id>
    <published>2019-01-22T00:00:00Z</published>
    <updated>2019-01-22T00:00:00Z</updated>
    <summary>In a case of awful timing, after my recent project involving some attiny85 programming I finally got around to learning how to use simavr and gdb to help debug my AVR code. It was too late for me (and I will never get the time back that I spent debugging things with an LED and lots of re-flashing), but maybe this will help someone else!
I&amp;rsquo;ve split this into three posts:</summary>
  </entry>
  
  <entry>
    <title>Debugging attiny85 code, part 2: Automating GDB with scripts</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-2/"/>
    <id>http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-2/</id>
    <published>2019-01-22T00:00:00Z</published>
    <updated>2019-01-22T00:00:00Z</updated>
    <summary>This is the second of three posts about using gdb and simavr to debug AVR code. The complete series is:
 Part 1: Using GDB
A walkthrough of using GDB to manually inspect the behavior of our code.
 Part 2: Automating GDB with scripts
Creating GDB scripts to automatically test the behavior of our code.
 Part 3: Tracing with simavr
Using simavr to collect information about the state of microcontroller pins while our code is running.</summary>
  </entry>
  
  <entry>
    <title>Debugging attiny85 code, part 3: Tracing with simavr</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-3/"/>
    <id>http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-3/</id>
    <published>2019-01-22T00:00:00Z</published>
    <updated>2019-01-22T00:00:00Z</updated>
    <summary>This is the third of three posts about using gdb and simavr to debug AVR code. The complete series is:
 Part 1: Using GDB
A walkthrough of using GDB to manually inspect the behavior of our code.
 Part 2: Automating GDB with scripts
Creating GDB scripts to automatically test the behavior of our code.
 Part 3: Tracing with simavr
Using simavr to collect information about the state of microcontroller pins while our code is running.</summary>
  </entry>
  
  <entry>
    <title>PiPower: A Raspberry Pi UPS</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-19-pipower-a-raspberry-pi-ups/"/>
    <id>http://blog.oddbit.com/post/2019-01-19-pipower-a-raspberry-pi-ups/</id>
    <published>2019-01-19T00:00:00Z</published>
    <updated>2019-01-19T00:00:00Z</updated>
    <summary>I have a Raspberry Pi running RetroPie hooked up to a television. It&amp;rsquo;s powered from a USB port on the TV, which is convenient, but it means that whenever we shut off the TV we&amp;rsquo;re pulling the plug on the Pi. While there haven&amp;rsquo;t been any problems so far, this is a classic recipe for filesystem problems or data loss at some point. I started looking into UPS options to alleviate this issue.</summary>
  </entry>
  
  <entry>
    <title>Integrating Bitwarden with Ansible</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2018-10-19-integrating-bitwarden-with-ans/"/>
    <id>http://blog.oddbit.com/post/2018-10-19-integrating-bitwarden-with-ans/</id>
    <published>2018-10-19T00:00:00Z</published>
    <updated>2018-10-19T00:00:00Z</updated>
    <summary>Bitwarden is a password management service (like LastPass or 1Password). It&amp;rsquo;s unique in that it is built entirely on open source software. In addition to the the web UI and mobile apps that you would expect, Bitwarden also provides a command-line tool for interacting with the your password store.
At $WORK(-ish) we&amp;rsquo;re looking into Bitwarden because we want a password sharing and management solution that was better than dropping files into directories on remote hosts or sharing things over Slack.</summary>
  </entry>
  
</feed>
