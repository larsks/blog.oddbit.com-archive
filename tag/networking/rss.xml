<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>networking on The Odd Bit</title>
    <link>https://blog.oddbit.com/tag/networking/</link>
    <description>Recent content in networking on The Odd Bit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.oddbit.com/tag/networking/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Configuring Open vSwitch with nmcli</title>
      <link>https://blog.oddbit.com/post/2020-02-15-configuring-open-vswitch-with/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2020-02-15-configuring-open-vswitch-with/</guid>
      <description>I recently acquired a managed switch for my home office in order to segment a few devices off onto their own isolated vlan. As part of this, I want to expose these vlans on my desktop using Open vSwitch (OVS), and I wanted to implement the configuration using NetworkManager rather than either relying on the legacy /etc/sysconfig/network-scripts scripts or rolling my own set of services. These are my notes in case I ever have to do this again.</description>
    </item>
    
    <item>
      <title>OVN and DHCP: A minimal example</title>
      <link>https://blog.oddbit.com/post/2019-12-19-ovn-and-dhcp/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2019-12-19-ovn-and-dhcp/</guid>
      <description>Introduction A long time ago, I wrote an article all about OpenStack Neutron (which at that time was called Quantum). That served as an excellent reference for a number of years, but if you&amp;rsquo;ve deployed a recent version of OpenStack you may have noticed that the network architecture looks completely different. The network namespaces previously used to implement routers and dhcp servers are gone (along with iptables rules and other features), and have been replaced by OVN (&amp;ldquo;Open Virtual Network&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>Configuring a static address for wlan0 on Raspbian Stretch</title>
      <link>https://blog.oddbit.com/post/2018-06-14-configuring-a-static-address-f/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2018-06-14-configuring-a-static-address-f/</guid>
      <description>Recent releases of Raspbian have adopted the use of dhcpcd to manage both dynamic and static interface configuration. If you would prefer to use the traditional /etc/network/interfaces mechanism instead, follow these steps.
  First, disable dhcpcd and wpa_supplicant.
 systemctl disable --now dhdpcd wpa_supplicant    You will need a wpa_supplicant configuration for wlan0 in /etc/wpa_supplicant/wpa_supplicant-wlan0.conf.
If you already have an appropriate configuration in /etc/wpa_supplicant/wpa_supplicant.conf, you can just symlink the file:</description>
    </item>
    
    <item>
      <title>Using Docker macvlan networks</title>
      <link>https://blog.oddbit.com/post/2018-03-12-using-docker-macvlan-networks/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2018-03-12-using-docker-macvlan-networks/</guid>
      <description>A question that crops up regularly on #docker is &amp;ldquo;How do I attach a container directly to my local network?&amp;rdquo; One possible answer to that question is the macvlan network type, which lets you create &amp;ldquo;clones&amp;rdquo; of a physical interface on your host and use that to attach containers directly to your local network. For the most part it works great, but it does come with some minor caveats and limitations.</description>
    </item>
    
    <item>
      <title>Listening for connections on all ports/any port</title>
      <link>https://blog.oddbit.com/post/2018-02-27-listening-for-connections-on-a/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2018-02-27-listening-for-connections-on-a/</guid>
      <description>On IRC &amp;ndash; and other online communities &amp;ndash; it is common to use a &amp;ldquo;pastebin&amp;rdquo; service to share snippets of code, logs, and other material, rather than pasting them directly into a conversation. These services will typically return a URL that you can share with others so that they can see the content in their browser.
One of my favorite pastebin services is termbin.com, because it works from the command line using tools you probably already have installed.</description>
    </item>
    
    <item>
      <title>Provider external networks (in an appropriate amount of detail)</title>
      <link>https://blog.oddbit.com/post/2015-08-13-provider-external-networks-details/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2015-08-13-provider-external-networks-details/</guid>
      <description>In Quantum in Too Much Detail, I discussed the architecture of a Neutron deployment in detail. Since that article was published, Neutron gained the ability to handle multiple external networks with a single L3 agent. While I wrote about that back in 2014, I covered the configuration side of it in much more detail than I discussed the underlying network architecture. This post addresses the architecture side.
The players This document describes the architecture that results from a particular OpenStack configuration, specifically:</description>
    </item>
    
    <item>
      <title>Docker networking with dedicated network containers</title>
      <link>https://blog.oddbit.com/post/2014-10-06-docker-networking-with-dedicat/</link>
      <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2014-10-06-docker-networking-with-dedicat/</guid>
      <description>The current version of Docker has a very limited set of networking options:
 bridge &amp;ndash; connect a container to the Docker bridge host &amp;ndash; run the container in the global network namespace container:xxx &amp;ndash; connect a container to the network namespace of another container none &amp;ndash; do not configure any networking  If you need something more than that, you can use a tool like pipework to provision additional network interfaces inside the container, but this leads to a synchronization problem: pipework can only be used after your container is running.</description>
    </item>
    
    <item>
      <title>Four ways to connect a docker container to a local network</title>
      <link>https://blog.oddbit.com/post/2014-08-11-four-ways-to-connect-a-docker/</link>
      <pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2014-08-11-four-ways-to-connect-a-docker/</guid>
      <description>Update (2018-03-22) Since I wrote this document back in 2014, Docker has developed the macvlan network driver. That gives you a supported mechanism for direct connectivity to a local layer 2 network. I&amp;rsquo;ve written an article about working with the macvlan driver.
 This article discusses four ways to make a Docker container appear on a local network. These are not suggested as practical solutions, but are meant to illustrate some of the underlying network technology available in Linux.</description>
    </item>
    
    <item>
      <title>Booting an instance with multiple fixed addresses</title>
      <link>https://blog.oddbit.com/post/2014-05-28-booting-an-instance-with-multi/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2014-05-28-booting-an-instance-with-multi/</guid>
      <description>This article expands on my answer to Add multiple specific IPs to instance, a question posted to ask.openstack.org.
In order to serve out SSL services from an OpenStack instance, you will generally want one local ip address for each SSL virtual host you support. It is possible to create an instance with multiple fixed addresses, but there are a few complications to watch out for.
Assumptions This article assumes that the following resources exist:</description>
    </item>
    
    <item>
      <title>Multiple external networks with a single L3 agent</title>
      <link>https://blog.oddbit.com/post/2014-05-28-multiple-external-networks-wit/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2014-05-28-multiple-external-networks-wit/</guid>
      <description>In the old days (so, like, last year), Neutron supported a single external network per L3 agent. You would run something like this&amp;hellip;
$ neutron net-create external --router:external=true  &amp;hellip;and neutron would map this to the bridge defined in external_network_bridge in /etc/neutron/l3_agent.ini. If you wanted to support more than a single external network, you would need to run multiple L3 agents, each with a unique value for external_network_bridge.
There is now a better option available.</description>
    </item>
    
    <item>
      <title>Video: Configuring OpenStack&#39;s external bridge on a single-interface system</title>
      <link>https://blog.oddbit.com/post/2014-05-27-configuring-openstacks-externa/</link>
      <pubDate>Tue, 27 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2014-05-27-configuring-openstacks-externa/</guid>
      <description>I&amp;rsquo;ve just put a video on Youtube that looks at the steps required to set up the external bridge (br-ex) on a single-interface system:
 </description>
    </item>
    
    <item>
      <title>Open vSwitch and persistent MAC addresses</title>
      <link>https://blog.oddbit.com/post/2014-05-23-open-vswitch-and-persistent-ma/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2014-05-23-open-vswitch-and-persistent-ma/</guid>
      <description>Normally I like to post solutions, but today&amp;rsquo;s post is about a vexing problem to which I have not been able to find a solution.
This started as a simple attempt to set up external connectivity on an all-in-one Icehouse install deployed on an OpenStack instance. I wanted to add eth0 to br-ex in order to model a typical method for providing external connectivity, but I ran into a very odd problem: the system would boot and work fine for a few seconds, but would then promptly lose network connectivity.</description>
    </item>
    
    <item>
      <title>Solved: Open vSwitch and persistent MAC addresses</title>
      <link>https://blog.oddbit.com/post/2014-05-23-solved-open-vswitch-and-persis/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2014-05-23-solved-open-vswitch-and-persis/</guid>
      <description>In my previous post I discussed a problem I was having setting a persistent MAC address on an OVS bridge device. It looks like the short answer is, &amp;ldquo;don&amp;rsquo;t use ip link set ...&amp;rdquo; for this purpose.
You can set the bridge MAC address via ovs-vsctl like this:
ovs-vsctl set bridge br-ex other-config:hwaddr=$MACADDR  So I&amp;rsquo;ve updated my ifconfig-br-ex to look like this:
DEVICE=br-ex DEVICETYPE=ovs TYPE=OVSBridge ONBOOT=yes OVSBOOTPROTO=dhcp OVSDHCPINTERFACES=eth0 MACADDR=fa:16:3e:ef:91:ec OVS_EXTRA=&amp;quot;set bridge br-ex other-config:hwaddr=$MACADDR&amp;quot;  The OVS_EXTRA parameter gets passed to the add-br call like this:</description>
    </item>
    
    <item>
      <title>Fedora and OVS Bridge Interfaces</title>
      <link>https://blog.oddbit.com/post/2014-05-20-fedora-and-ovs-bridge-interfac/</link>
      <pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2014-05-20-fedora-and-ovs-bridge-interfac/</guid>
      <description>I run OpenStack on my laptop, and I&amp;rsquo;ve been chasing down a pernicious problem with OVS bridge interfaces under both F19 and F20. My OpenStack environment relies on an OVS bridge device named br-ex for external connectivity and for making services available to OpenStack instances, but after rebooting, br-ex was consistently unconfigured, which caused a variety of problems.
This is the network configuration file for br-ex on my system:
DEVICE=br-ex DEVICETYPE=ovs TYPE=OVSBridge BOOTPROT=static IPADDR=192.</description>
    </item>
    
    <item>
      <title>Firewalld, NetworkManager, and OpenStack</title>
      <link>https://blog.oddbit.com/post/2014-05-20-firewalld-and-openstack/</link>
      <pubDate>Tue, 20 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2014-05-20-firewalld-and-openstack/</guid>
      <description>These are my notes on making OpenStack play well with firewalld and NetworkManager.
NetworkManager By default, NetworkManager attempts to start a DHCP client on every new available interface. Since booting a single instance in OpenStack can result in the creation of several virtual interfaces, this results in a lot of:
May 19 11:58:24 pk115wp-lkellogg NetworkManager[1357]: &amp;lt;info&amp;gt; Activation (qvb512640bd-ee) starting connection &#39;Wired connection 2&#39;  You can disable this behavior by adding the following to /etc/NetworkManager/NetworkManager.</description>
    </item>
    
    <item>
      <title>Visualizing Neutron Networking with GraphViz</title>
      <link>https://blog.oddbit.com/post/2013-12-23-visualizing-network-with-graphviz/</link>
      <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2013-12-23-visualizing-network-with-graphviz/</guid>
      <description>I&amp;rsquo;ve put together a few tools to help gather information about your Neutron and network configuration and visualize it in different ways. All of these tools are available as part of my neutron-diag repository on GitHub.
In this post I&amp;rsquo;m going to look at a tool that will help you visualize the connectivity of network devices on your system.
mk-network-dot There are a lot of devices involved in your Neutron network configuration.</description>
    </item>
    
    <item>
      <title>Quantum in Too Much Detail</title>
      <link>https://blog.oddbit.com/post/2013-11-14-quantum-in-too-much-detail/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2013-11-14-quantum-in-too-much-detail/</guid>
      <description>I originally posted this article on the RDO website.
 The players This document describes the architecture that results from a particular OpenStack configuration, specifically:
 Quantum networking using GRE tunnels; A dedicated network controller; A single instance running on a compute host  Much of the document will be relevant to other configurations, but details will vary based on your choice of layer 2 connectivity, number of running instances, and so forth.</description>
    </item>
    
    <item>
      <title>Why does the Neutron documentation recommend three interfaces?</title>
      <link>https://blog.oddbit.com/post/2013-10-28-why-does-the-neutron/</link>
      <pubDate>Mon, 28 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2013-10-28-why-does-the-neutron/</guid>
      <description>The documentation for configuring Neutron recommends that a network controller has three physical interfaces:
 Before you start, set up a machine to be a dedicated network node. Dedicated network nodes should have the following NICs: the management NIC (called MGMT_INTERFACE), the data NIC (called DATA_INTERFACE), and the external NIC (called EXTERNAL_INTERFACE).
 People occasionally ask, &amp;ldquo;why three interfaces? What if I only have two?&amp;rdquo;, so I wanted to provide an extended answer that might help people understand what the interfaces are for and what trade-offs are involved in using fewer interfaces.</description>
    </item>
    
    <item>
      <title>Waiting for networking using PowerShell</title>
      <link>https://blog.oddbit.com/post/2012-11-04-powershell-wait-for-networking/</link>
      <pubDate>Sun, 04 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2012-11-04-powershell-wait-for-networking/</guid>
      <description>I&amp;rsquo;ve recently been exploring the world of Windows scripting, and I ran into a small problem: I was running a script at system startup, and the script was running before the network interface (which was using DHCP) was configured.
There are a number of common solutions proposed to this problem:
  Just wait for some period of time.
This can work but it&amp;rsquo;s ugly, and because it doesn&amp;rsquo;t actually verify the network state it can result in things breaking if some problem prevents Windows from pulling a valid DHCP lease.</description>
    </item>
    
    <item>
      <title>Chasing OpenStack idle connection timeouts</title>
      <link>https://blog.oddbit.com/post/2012-07-30-openstack-idle-connection-timeouts/</link>
      <pubDate>Mon, 30 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2012-07-30-openstack-idle-connection-timeouts/</guid>
      <description>The original problem I&amp;rsquo;ve recently spent some time working on an OpenStack deployment. I ran into a problem in which the compute service would frequently stop communicating with the AMQP message broker (qpidd).
In order to gather some data on the problem, I ran the following simple test:
 Wait n minutes Run nova boot ... to create an instance Wait a minute and see if the new instance becomes ACTIVE If it works, delete the instance, set n = 2n and repeat  This demonstrated that communication was failing after about an hour, which correlates rather nicely with the idle connection timeout on the firewall.</description>
    </item>
    
    <item>
      <title>Rate limiting made simple</title>
      <link>https://blog.oddbit.com/post/2011-12-26-simple-rate-limiting/</link>
      <pubDate>Mon, 26 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2011-12-26-simple-rate-limiting/</guid>
      <description>I use CrashPlan as a backup service. It works and is very simple to set up, but has limited options for controlling bandwidth. In fact, if you&amp;rsquo;re running it on a headless system (e.g., a fileserver of some sort), your options are effectively &amp;ldquo;too slow&amp;rdquo; and &amp;ldquo;CONSUME EVERYTHING&amp;rdquo;. There is an open request to add time-based limitations to the application itself, but for now I&amp;rsquo;ve solved this using a very simple traffic shaping configuration.</description>
    </item>
    
    <item>
      <title>Linux UPnP Gateway</title>
      <link>https://blog.oddbit.com/post/2010-01-29-linux-upnp-gateway/</link>
      <pubDate>Fri, 29 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2010-01-29-linux-upnp-gateway/</guid>
      <description>Like many other folks out there, I have several computers in my house connected to the outside world via a Linux box acting as a NAT gateway. I often want to use application such as BitTorrent and Freenet, which require that a number of ports be forwarded from my external connection to the particular computer on which I happen to be working. It turns out there&amp;rsquo;s a protocol for this, called UPnP.</description>
    </item>
    
  </channel>
</rss>