<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Odd Bit</title>

  
  <link rel="self" href="https://blog.oddbit.com/tag/micropython/atom.xml"/>
  
  <link href="https://blog.oddbit.com/tag/micropython/" rel="alternate"></link>

  <updated>2022-02-13T00:00:00Z</updated>
  <id>https://blog.oddbit.com/tag/micropython/</id>
  <entry>
    <title>Udev rules for CH340 serial devices</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2022-02-13-wemos-udev-rules/"/>
    <id>https://blog.oddbit.com/post/2022-02-13-wemos-udev-rules/</id>
    <published>2022-02-13T00:00:00Z</published>
    <updated>2022-02-13T00:00:00Z</updated>
    <summary type="html">I like to fiddle with Micropython, particularly on the Wemos D1 Mini, because these are such a neat form factor. Unfortunately, they have a cheap CH340 serial adapter on board, which means that from the perspective of Linux these devices are all functionally identical &amp;ndash; there&amp;rsquo;s no way to identify one device from another. This by itself would be a manageable problem, except that the device names assigned to these devices aren&amp;rsquo;t constant: depending on the order in which they get plugged in (and the order in which they are detected at boot), a device might be /dev/ttyUSB0 one day and /dev/ttyUSB2 another day.</summary>
  </entry>
  
  <entry>
    <title>To sleep or not to sleep?</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2020-12-18-to-sleep-or-not-to-sleep/"/>
    <id>https://blog.oddbit.com/post/2020-12-18-to-sleep-or-not-to-sleep/</id>
    <published>2020-12-18T00:00:00Z</published>
    <updated>2020-12-18T00:00:00Z</updated>
    <summary type="html">Let&amp;rsquo;s say you have a couple of sensors attached to an ESP8266 running MicroPython. You&amp;rsquo;d like to sample them at different frequencies (say, one every 60 seconds and one every five minutes), and you&amp;rsquo;d like to do it as efficiently as possible in terms of power consumption. What are your options?
If we don&amp;rsquo;t care about power efficiency, the simplest solution is probably a loop like this:
import machine lastrun_1 = 0 lastrun_2 = 0 while True: now = time.</summary>
  </entry>
  
  <entry>
    <title>I see you have the machine that goes ping...</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2020-03-20-i-see-you-have-the-machine-tha/"/>
    <id>https://blog.oddbit.com/post/2020-03-20-i-see-you-have-the-machine-tha/</id>
    <published>2020-03-20T00:00:00Z</published>
    <updated>2020-03-20T00:00:00Z</updated>
    <summary type="html">We&amp;rsquo;re all looking for ways to keep ourselves occupied these days, and for me that means leaping at the chance to turn a small problem into a slightly ridiculous electronics project. For reasons that I won&amp;rsquo;t go into here I wanted to generate an alert when a certain WiFi BSSID becomes visible. A simple solution to this problem would have been a few lines of shell script to send me an email&amp;hellip;but this article isn&amp;rsquo;t about simple solutions!</summary>
  </entry>
  
  <entry>
    <title>Using a TM1637 LED module with CircuitPython</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2018-05-03-using-a-tm-led-module-with-cir/"/>
    <id>https://blog.oddbit.com/post/2018-05-03-using-a-tm-led-module-with-cir/</id>
    <published>2018-05-03T00:00:00Z</published>
    <updated>2018-05-03T00:00:00Z</updated>
    <summary type="html">CircuitPython is &amp;ldquo;an education friendly open source derivative of MicroPython&amp;rdquo;. MicroPython is a port of Python to microcontroller environments; it can run on boards with very few resources such as the ESP8266. I&amp;rsquo;ve recently started experimenting with CircuitPython on a Wemos D1 mini, which is a small form-factor ESP8266 board.
I had previously been using Mike Causer&amp;rsquo;s micropython-tm1637 for MicroPython to drive a 4 digit LED display. I was hoping to get the same code working under CircuitPython, but when I tried to build an image that included the tm1637 module I ran into:</summary>
  </entry>
  
</feed>
