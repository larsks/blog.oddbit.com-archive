<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>openshift on The Odd Bit</title>
    <link>http://blog.oddbit.com/tag/openshift/</link>
    <description>Recent content in openshift on The Odd Bit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Nov 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.oddbit.com/tag/openshift/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sockets on OpenShift</title>
      <link>http://blog.oddbit.com/post/2013-11-23-openshift-socket-pro/</link>
      <pubDate>Sat, 23 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.oddbit.com/post/2013-11-23-openshift-socket-pro/</guid>
      <description>In this article, a followup to my previous post regarding long-poll servers and Python, we investigate the code changes that were necessary to make the code work when deployed on OpenShift.
In the previous post, we implemented IO polling to watch for client disconnects at the same time we were waiting for messages on a message bus:
poll = zmq.Poller() poll.register(subsock, zmq.POLLIN) poll.register(rfile, zmq.POLLIN) events = dict(poll.poll()) . . .</description>
    </item>
    
  </channel>
</rss>