<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Odd Bit</title>

  
  <link rel="self" href="https://blog.oddbit.com/tag/openshift/atom.xml"/>
  
  <link href="https://blog.oddbit.com/tag/openshift/" rel="alternate"></link>

  <updated>2020-09-27T00:00:00Z</updated>
  <id>https://blog.oddbit.com/tag/openshift/</id>
  <entry>
    <title>Installing metallb on OpenShift with Kustomize</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2020-09-27-installing-metallb-on-openshif/"/>
    <id>https://blog.oddbit.com/post/2020-09-27-installing-metallb-on-openshif/</id>
    <published>2020-09-27T00:00:00Z</published>
    <updated>2020-09-27T00:00:00Z</updated>
    <summary type="html">Out of the box, OpenShift (4.x) on bare metal doesn&amp;rsquo;t come with any integrated load balancer support (when installed in a cloud environment, OpenShift typically makes use of the load balancing features available from the cloud provider). Fortunately, there are third party solutions available that are designed to work in bare metal environments. MetalLB is a popular choice, but requires some minor fiddling to get it to run properly on OpenShift.</summary>
  </entry>
  
  <entry>
    <title>OpenShift and CNV: MAC address management in CNV 2.4</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2020-08-10-mac-address-management-in-cnv/"/>
    <id>https://blog.oddbit.com/post/2020-08-10-mac-address-management-in-cnv/</id>
    <published>2020-08-10T00:00:00Z</published>
    <updated>2020-08-10T00:00:00Z</updated>
    <summary type="html">This is part of a series of posts about my experience working with OpenShift and CNV. In this post, I&amp;rsquo;ll look at how the recently released CNV 2.4 resolves some issues in managing virtual machines that are attached directly to local layer 2 networks
In an earlier post, I discussed some issues around the management of virtual machine MAC addresses in CNV 2.3: in particular, that virtual machines are assigned a random MAC address not just at creation time but every time they boot.</summary>
  </entry>
  
  <entry>
    <title>OpenShift and CNV: Exposing virtualized services</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2020-07-30-openshift-and-cnv-part-2-expos/"/>
    <id>https://blog.oddbit.com/post/2020-07-30-openshift-and-cnv-part-2-expos/</id>
    <published>2020-07-30T01:00:00Z</published>
    <updated>2020-07-30T01:00:00Z</updated>
    <summary type="html">This is the second in a series of posts about my experience working with OpenShift and CNV. In this post, I&amp;rsquo;ll be taking a look at how to expose services on a virtual machine once you&amp;rsquo;ve git it up and running.
 TL;DR Overview Connectivity options Direct attachment Using an OpenShift Service  Exposing services on NodePorts Exposing services on cluster external IPso Exposing services using a LoadBalancer     TL;DR Networking seems to be a weak area for CNV right now.</summary>
  </entry>
  
  <entry>
    <title>OpenShift and CNV: Installer network requirements</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2020-07-30-openshift-and-cnv-part-1-worki/"/>
    <id>https://blog.oddbit.com/post/2020-07-30-openshift-and-cnv-part-1-worki/</id>
    <published>2020-07-30T00:00:00Z</published>
    <updated>2020-07-30T00:00:00Z</updated>
    <summary type="html">This is the first in a series of posts about my experience working with OpenShift and CNV (&amp;ldquo;Container Native Virtualization&amp;rdquo;, a technology that allows you to use OpenShift to manage virtualized workloads in addition to the containerized workloads for which OpenShift is known). In this post, I&amp;rsquo;ll be taking a look at the installation experience, and in particular at how restrictions in our local environment interacted with the network requirements of the installer.</summary>
  </entry>
  
  <entry>
    <title>Sockets on OpenShift</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2013-11-23-openshift-socket-pro/"/>
    <id>https://blog.oddbit.com/post/2013-11-23-openshift-socket-pro/</id>
    <published>2013-11-23T00:00:00Z</published>
    <updated>2013-11-23T00:00:00Z</updated>
    <summary type="html">In this article, a followup to my previous post regarding long-poll servers and Python, we investigate the code changes that were necessary to make the code work when deployed on OpenShift.
In the previous post, we implemented IO polling to watch for client disconnects at the same time we were waiting for messages on a message bus:
poll = zmq.Poller() poll.register(subsock, zmq.POLLIN) poll.register(rfile, zmq.POLLIN) events = dict(poll.poll()) . . .  If you were to try this at home, you would find that everything worked as described&amp;hellip;but if you were to deploy the same code to OpenShift, you would find that the problem we were trying to solve (the server holding file descriptors open after a client disconnected) would still exist.</summary>
  </entry>
  
</feed>
