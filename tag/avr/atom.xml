<feed xmlns="http://www.w3.org/2005/Atom">
  <title>avr on The Odd Bit</title>

  
  <link rel="self" href="http://blog.oddbit.com/tag/avr/atom.xml"/>
  
  <link href="http://blog.oddbit.com/tag/avr/" rel="alternate"></link>

  <updated>2019-02-11T00:00:00Z</updated>
  <id>http://blog.oddbit.com/tag/avr/</id>
  
  <entry>
    <title>In which I PEBKAC so you don&#39;t have to</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-02-11-in-which-i-pebkac-so-you-dont-/"/>
    <id>http://blog.oddbit.com/post/2019-02-11-in-which-i-pebkac-so-you-dont-/</id>
    <published>2019-02-11T00:00:00Z</published>
    <updated>2019-02-11T00:00:00Z</updated>
    <summary type="html">Say you have a simple bit of code:
#include &amp;lt;avr/io.h&amp;gt; #include &amp;lt;util/delay.h&amp;gt; #define LED_BUILTIN _BV(PORTB5) int main(void) { DDRB |= LED_BUILTIN; while (1) { PORTB |= LED_BUILTIN; // turn on led _delay_ms(1000); // delay 1s PORTB &amp;amp;= ~LED_BUILTIN; // turn off led _delay_ms(1000); // delay 1s } }  You have a Makefile that compiles that into an object (.o) file like this:
avr-gcc -mmcu=atmega328p -DF_CPU=16000000 -Os -c blink.c  If you were to forget to set the device type when compiling your .</summary>
  </entry>
  
  <entry>
    <title>ATOMIC_BLOCK magic in avr-libc</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-02-01-atomicblock-magic-in-avrlibc/"/>
    <id>http://blog.oddbit.com/post/2019-02-01-atomicblock-magic-in-avrlibc/</id>
    <published>2019-02-01T00:00:00Z</published>
    <updated>2019-02-01T00:00:00Z</updated>
    <summary type="html">The AVR C library, avr-libc, provide an ATOMIC_BLOCK macro that you can use to wrap critical sections of your code to ensure that interrupts are disabled while the code executes. At high level, the ATOMIC_BLOCK macro (when called using ATOMIC_FORCEON) does something like this:
cli(); ...your code here... seti();  But it&amp;rsquo;s more than that. If you read the documentation for the macro, it says:
 Creates a block of code that is guaranteed to be executed atomically.</summary>
  </entry>
  
  <entry>
    <title>AVR micro-optimization: Avr-gcc and --short-enums</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-28-avr-gcc-short-enums/"/>
    <id>http://blog.oddbit.com/post/2019-01-28-avr-gcc-short-enums/</id>
    <published>2019-01-28T00:00:00Z</published>
    <updated>2019-01-28T00:00:00Z</updated>
    <summary type="html">How big is an enum? I noticed something odd while browsing through the assembly output of some AVR C code I wrote recently. In the code, I have the following expression:
int main() { setup(); while (state != STATE_QUIT) { loop(); } }  Here, state is a variable of type enum STATE, which looks something like this (not exactly like this; there are actually 19 possible values but I didn&amp;rsquo;t want to clutter this post with unnecessary code listings):</summary>
  </entry>
  
  <entry>
    <title>AVR micro-optimization: Losing malloc</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-28-losing-malloc/"/>
    <id>http://blog.oddbit.com/post/2019-01-28-losing-malloc/</id>
    <published>2019-01-28T00:00:00Z</published>
    <updated>2019-01-28T00:00:00Z</updated>
    <summary type="html">Pssst! Hey&amp;hellip;hey, buddy, wanna get an extra KB for cheap?
When I write OO-style code in C, I usually start with something like the following, in which I use malloc() to allocate memory for a variable of a particular type, perform some initialization actions, and then return it to the caller:
Button *button_new(uint8_t pin, uint8_t poll_freq) { Button *button = (Button *)malloc(sizeof(Button)); // do some initialization stuff return button; }  And when initially writing pipower, that&amp;rsquo;s exactly what I did.</summary>
  </entry>
  
  <entry>
    <title>Debugging attiny85 code, part 1: simavr and gdb</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-1/"/>
    <id>http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-1/</id>
    <published>2019-01-22T00:00:00Z</published>
    <updated>2019-01-22T00:00:00Z</updated>
    <summary type="html">In a case of awful timing, after my recent project involving some attiny85 programming I finally got around to learning how to use simavr and gdb to help debug my AVR code. It was too late for me (and I will never get the time back that I spent debugging things with an LED and lots of re-flashing), but maybe this will help someone else!
I&amp;rsquo;ve split this into three posts:</summary>
  </entry>
  
  <entry>
    <title>Debugging attiny85 code, part 2: Automating GDB with scripts</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-2/"/>
    <id>http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-2/</id>
    <published>2019-01-22T00:00:00Z</published>
    <updated>2019-01-22T00:00:00Z</updated>
    <summary type="html">This is the second of three posts about using gdb and simavr to debug AVR code. The complete series is:
 Part 1: Using GDB
A walkthrough of using GDB to manually inspect the behavior of our code.
 Part 2: Automating GDB with scripts
Creating GDB scripts to automatically test the behavior of our code.
 Part 3: Tracing with simavr
Using simavr to collect information about the state of microcontroller pins while our code is running.</summary>
  </entry>
  
  <entry>
    <title>Debugging attiny85 code, part 3: Tracing with simavr</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-3/"/>
    <id>http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-3/</id>
    <published>2019-01-22T00:00:00Z</published>
    <updated>2019-01-22T00:00:00Z</updated>
    <summary type="html">This is the third of three posts about using gdb and simavr to debug AVR code. The complete series is:
 Part 1: Using GDB
A walkthrough of using GDB to manually inspect the behavior of our code.
 Part 2: Automating GDB with scripts
Creating GDB scripts to automatically test the behavior of our code.
 Part 3: Tracing with simavr
Using simavr to collect information about the state of microcontroller pins while our code is running.</summary>
  </entry>
  
</feed>
