<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>storage on The Odd Bit</title>
    <link>https://blog.oddbit.com/tag/storage/</link>
    <description>Recent content in storage on The Odd Bit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tag/storage/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Connecting OpenShift to an External Ceph Cluster</title>
      <link>https://blog.oddbit.com/post/2021-08-23-external-ocs/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2021-08-23-external-ocs/</guid>
      <description>Red Hat&amp;rsquo;s [OpenShift Data Foundation][ocs] (formerly &amp;ldquo;OpenShift Container Storage&amp;rdquo;, or &amp;ldquo;OCS&amp;rdquo;) allows you to either (a) automatically set up a Ceph cluster as an application running on your OpenShift cluster, or (b) connect your OpenShift cluster to an externally managed Ceph cluster. While setting up Ceph as an OpenShift application is a relatively polished experienced, connecting to an external cluster still has some rough edges.
NB I am not a Ceph expert.</description>
    </item>
    
    <item>
      <title>Fun with devicemapper snapshots</title>
      <link>https://blog.oddbit.com/post/2018-01-25-fun-with-devicemapper-snapshot/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2018-01-25-fun-with-devicemapper-snapshot/</guid>
      <description>I find myself working with Raspbian disk images fairly often. A typical workflow is:
 Download the disk image. Mount the filesystem somewhere to check something. Make some changes or install packages just to check something else. Crap I&amp;rsquo;ve made changes.  &amp;hellip;at which point I need to fetch a new copy of the image next time I want to start fresh.
Sure, I could just make a copy of the image and work from there, but what fun is that?</description>
    </item>
    
    <item>
      <title>Growing a filesystem on a virtual disk</title>
      <link>https://blog.oddbit.com/post/2012-10-24-resizing-virtual-disk/</link>
      <pubDate>Wed, 24 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2012-10-24-resizing-virtual-disk/</guid>
      <description>Occasionally we will deploy a virtual instance into our KVM infrastructure and realize after the fact that we need more local disk space available. This is the process we use to expand the disk image. This process assumes the following:
 You&amp;rsquo;re using legacy disk partitions. The process for LVM is similar and I will describe that in another post (it&amp;rsquo;s generally identical except for an additional pvresize thrown in and lvextend in place of resize2fs).</description>
    </item>
    
    <item>
      <title>Installing CrashPlan under FreeBSD 8</title>
      <link>https://blog.oddbit.com/post/2011-05-22-installing-crashplan-under-fre/</link>
      <pubDate>Sun, 22 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2011-05-22-installing-crashplan-under-fre/</guid>
      <description>This articles describes how I got CrashPlan running on my FreeBSD 8(-STABLE) system. These instructions by Kim Scarborough were my starting point, but as these were for FreeBSD 7 there were some additional steps necessary to get things working.
Install Java I had originally thought that it might be possible to run the CrashPlan client &amp;ldquo;natively&amp;rdquo; under FreeBSD. CrashPlan is a Java application, so this seemed like a possible solution. Unfortunately, Java under FreeBSD 8 seems to be a lost cause.</description>
    </item>
    
  </channel>
</rss>
