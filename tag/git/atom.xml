<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Odd Bit</title>

  
  <link rel="self" href="https://blog.oddbit.com/tag/git/atom.xml"/>
  
  <link href="https://blog.oddbit.com/tag/git/" rel="alternate"></link>

  <updated>2022-09-22T00:00:00Z</updated>
  <id>https://blog.oddbit.com/tag/git/</id>
  <entry>
    <title>Delete GitHub workflow runs using the gh cli</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2022-09-22-delete-workflow-runs/"/>
    <id>https://blog.oddbit.com/post/2022-09-22-delete-workflow-runs/</id>
    <published>2022-09-22T00:00:00Z</published>
    <updated>2022-09-22T00:00:00Z</updated>
    <summary type="html">Hello, future me. This is for you next time you want to do this.
When setting up the CI for a project I will sometimes end up with a tremendous clutter of workflow runs. Sometimes they have embarrassing mistakes. Who wants to show that to people? I was trying to figure out how to bulk delete workflow runs from the CLI, and I came up with something that works:
gh run list --json databaseId -q &#39;.</summary>
  </entry>
  
  <entry>
    <title>Tools for writing about Git</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-02-27-git-doc-tools/"/>
    <id>https://blog.oddbit.com/post/2021-02-27-git-doc-tools/</id>
    <published>2021-02-27T00:00:00Z</published>
    <updated>2021-02-27T00:00:00Z</updated>
    <summary type="html">I sometimes find myself writing articles or documentation about git, so I put together a couple of terrible hacks for generating reproducible histories and pretty graphs of those histories.
git synth The git synth command reads a YAML description of a repository and executes the necessary commands to reproduce that history. It allows you set the name and email address of the author and committer as well as static date, so you every time you generate the repository you can identical commit ids.</summary>
  </entry>
  
  <entry>
    <title>Editing a commit message without git rebase</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-02-18-editing-a-commit-message-witho/"/>
    <id>https://blog.oddbit.com/post/2021-02-18-editing-a-commit-message-witho/</id>
    <published>2021-02-18T00:00:00Z</published>
    <updated>2021-02-18T00:00:00Z</updated>
    <summary type="html">While working on a pull request I will make liberal use of git rebase to clean up a series of commits: squashing typos, re-ordering changes for logical clarity, and so forth. But there are some times when all I want to do is change a commit message somewhere down the stack, and I was wondering if I had any options for doing that without reaching for git rebase.
It turns out the answer is &amp;ldquo;yes&amp;rdquo;, as long as you have a linear history.</summary>
  </entry>
  
  <entry>
    <title>Avoid rebase hell: squashing without rebasing</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2019-06-17-avoid-rebase-hell-squashing-wi/"/>
    <id>https://blog.oddbit.com/post/2019-06-17-avoid-rebase-hell-squashing-wi/</id>
    <published>2019-06-17T00:00:00Z</published>
    <updated>2019-06-17T00:00:00Z</updated>
    <summary type="html">You&amp;rsquo;re working on a pull request. You&amp;rsquo;ve been working on a pull request for a while, and due to lack of sleep or inebriation you&amp;rsquo;ve been merging changes into your feature branch rather than rebasing. You now have a pull request that looks like this (I&amp;rsquo;ve marked merge commits with the text [merge]):
7e181479 Adds methods for widget sales 0487162 [merge] Merge remote-tracking branch &#39;origin/master&#39; into my_feature 76ee81c [merge] Merge branch &#39;my_feature&#39; of https://github.</summary>
  </entry>
  
  <entry>
    <title>Git Etiquette: Commit messages and pull requests</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2019-06-14-git-etiquette-commit-messages/"/>
    <id>https://blog.oddbit.com/post/2019-06-14-git-etiquette-commit-messages/</id>
    <published>2019-06-14T00:00:00Z</published>
    <updated>2019-06-14T00:00:00Z</updated>
    <summary type="html">Always work on a branch (never commit on master) When working with an upstream codebase, always make your changes on a feature branch rather than your local master branch. This will make it easier to keep your local master branch current with respect to upstream, and can help avoid situations in which you accidentally overwrite your local changes or introduce unnecessary merge commits into your history.
Rebase instead of merge If you need to incorporate changes from the upstream master branch in the feature branch on which you are currently doing, bring in those changes using git rebase rather than git merge.</summary>
  </entry>
  
  <entry>
    <title>Making sure your Gerrit changes aren&#39;t broken</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2017-01-22-making-sure-your-gerrit-change/"/>
    <id>https://blog.oddbit.com/post/2017-01-22-making-sure-your-gerrit-change/</id>
    <published>2017-01-22T00:00:00Z</published>
    <updated>2017-01-22T00:00:00Z</updated>
    <summary type="html">It&amp;rsquo;s a bit of an embarrassment when you submit a review to Gerrit only to have it fail CI checks immediately because of something as simple as a syntax error or pep8 failure that you should have caught yourself before submitting&amp;hellip;but you forgot to run your validations before submitting the change.
In many cases you can alleviate this through the use of the git pre-commit hook, which will run every time you commit changes locally.</summary>
  </entry>
  
  <entry>
    <title>A collection of git tips</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2016-02-19-a-collection-of-git-tips/"/>
    <id>https://blog.oddbit.com/post/2016-02-19-a-collection-of-git-tips/</id>
    <published>2016-02-19T00:00:00Z</published>
    <updated>2016-02-19T00:00:00Z</updated>
    <summary type="html">This is a small collection of simple git tips and tricks I use to make my life easier.
Quickly amend an existing commit with new files I have this alias in place that will amend the current commit while automatically re-using the existing commit message:
alias.fix=commit --amend -C HEAD  With this in place, fixing a review becomes:
$ vim some/file/somewhere $ git add -u $ git fix  Which I find much more convenient than git commit --amend, following by saving the commit message.</summary>
  </entry>
  
  <entry>
    <title>Automatic git cache</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2015-10-19-automatic-git-cache/"/>
    <id>https://blog.oddbit.com/post/2015-10-19-automatic-git-cache/</id>
    <published>2015-10-19T00:00:00Z</published>
    <updated>2015-10-19T00:00:00Z</updated>
    <summary type="html">This post is in response to a comment someone made on irc earlier today:
 [I] would really like a git lookaside cache which operated on an upstream repo, but pulled objects locally when they&amp;rsquo;re available
 In this post I present a proof-of-concept solution to this request. Please note that thisand isn&amp;rsquo;t something that has actually been used or tested anywhere!
If you access a git repository via ssh, it&amp;rsquo;s easy to provide a wrapper for git operations via the command= option in an authorized_keys file.</summary>
  </entry>
  
  <entry>
    <title>Teach git about GIT_SSL_CIPHER_LIST</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2015-05-08-git-ssl-cipher-list/"/>
    <id>https://blog.oddbit.com/post/2015-05-08-git-ssl-cipher-list/</id>
    <published>2015-05-08T00:00:00Z</published>
    <updated>2015-05-08T00:00:00Z</updated>
    <summary type="html">Someone named hithard on StackOverflow was trying to clone a git repository via https, and was running into an odd error: &amp;ldquo;Cannot communicate securely with peer: no common encryption algorithm(s).&amp;rdquo;. This was due to the fact that the server (openhatch.org) was configured to use a cipher suite that was not supported by default in the underlying SSL library (which could be either OpenSSL or NSS, depending on how git was built).</summary>
  </entry>
  
  <entry>
    <title>Using tools badly: time shifting git commits with Workinghours
</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2015-04-10-workinghours-time-shifting-git/"/>
    <id>https://blog.oddbit.com/post/2015-04-10-workinghours-time-shifting-git/</id>
    <published>2015-04-10T00:00:00Z</published>
    <updated>2015-04-10T00:00:00Z</updated>
    <summary type="html">This is a terrible hack. If you are easily offended by bad ideas implemented poorly, move along!
You are working on a wonderful open source project&amp;hellip;but you are not supposed to be working on that project! You&amp;rsquo;re supposed to be doing your real work! Unfortunately, your extra-curricular activity is well documented in the git history of your project for all to see:
And now your boss knows why the TPS reports are late.</summary>
  </entry>
  
  <entry>
    <title>Tracking down a kernel bug with git bisect</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2014-07-21-tracking-down-a-kernel-bug-wit/"/>
    <id>https://blog.oddbit.com/post/2014-07-21-tracking-down-a-kernel-bug-wit/</id>
    <published>2014-07-21T00:00:00Z</published>
    <updated>2014-07-21T00:00:00Z</updated>
    <summary type="html">After a recent upgrade of my Fedora 20 system to kernel 3.15.mumble, I started running into a problem (BZ 1121345) with my Docker containers. Operations such as su or runuser would fail with the singularly unhelpful System error message:
$ docker run -ti fedora /bin/bash bash-4.2# su -c &#39;uptime&#39; su: System error  Hooking up something (like, say, socat unix-listen:/dev/log -) to /dev/log revealed that the system was logging:
Jul 19 14:31:18 su: PAM audit_log_acct_message() failed: Operation not permitted  Downgrading the kernel to 3.</summary>
  </entry>
  
  <entry>
    <title>Automatic maintenance of tag feeds</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2013-11-22-automatic-maintenanc/"/>
    <id>https://blog.oddbit.com/post/2013-11-22-automatic-maintenanc/</id>
    <published>2013-11-22T00:00:00Z</published>
    <updated>2013-11-22T00:00:00Z</updated>
    <summary type="html">I recently added some scripts to automatically generate tag feeds for my blog when pushing new content. I&amp;rsquo;m using GitHub Pages to publish everything, so it seemed easiest to make tag generation part of a pre-push hook (new in Git 1.8.2). This hook is run automatically as part of the git push operation, so it&amp;rsquo;s the perfect place to insert generated content that must be kept in sync with posts on the blog.</summary>
  </entry>
  
  <entry>
    <title>Git fetch, tags, remotes, and more</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2012-07-27-git-fetch-tags-et-al/"/>
    <id>https://blog.oddbit.com/post/2012-07-27-git-fetch-tags-et-al/</id>
    <published>2012-07-27T00:00:00Z</published>
    <updated>2012-07-27T00:00:00Z</updated>
    <summary type="html">I’ve been playing around with Git, Puppet, and GPG verification of our Puppet configuration repository, and these are some random facts about Git that have come to light as part of the process.
If you want to pull both changes and new tags from a remote repository, you can do this:
$ git fetch $ git fetch --tags  Or you can do this:
$ git fetch --tags $ git fetch  What’s the difference?</summary>
  </entry>
  
  <entry>
    <title>Pushing a Git repository to Subversion</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2010-05-11-pushing-git-repository-to-subv/"/>
    <id>https://blog.oddbit.com/post/2010-05-11-pushing-git-repository-to-subv/</id>
    <published>2010-05-11T00:00:00Z</published>
    <updated>2010-05-11T00:00:00Z</updated>
    <summary type="html">I recently set up a git repository server (using gitosis and gitweb). Among the required features of the system was the ability to publish the git repository to a read-only Subversion repository. This sounds simple in principle but in practice proved to be a bit tricky.
Git makes an excellent Subversion client. You can use the git svn &amp;hellip; series of commands to pull a remote Subversion repository into a local git working tree and then have all the local advantages of git forcing the central code repository to change version control software.</summary>
  </entry>
  
  <entry>
    <title>Cleaning up Subversion with Git</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2010-01-29-cleaning-up-subversion-with-gi/"/>
    <id>https://blog.oddbit.com/post/2010-01-29-cleaning-up-subversion-with-gi/</id>
    <published>2010-01-29T00:00:00Z</published>
    <updated>2010-01-29T00:00:00Z</updated>
    <summary type="html">Overview At my office, we have a crufty Subversion repository (dating back to early 2006) that contains a jumble of unrelated projects. We would like to split this single repository up into a number of smaller repositories, each following the recommended trunk/tags/branches repository organization.
What we want to do is move a project from a path that looks like this:
.../projects/some-project-name  To a new repository using the recommended Subversion repository layout, like this:</summary>
  </entry>
  
</feed>
