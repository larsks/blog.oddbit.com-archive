<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bad_ideas on The Odd Bit</title>
    <link>https://blog.oddbit.com/tag/bad_ideas/</link>
    <description>Recent content in bad_ideas on The Odd Bit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Apr 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tag/bad_ideas/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using tools badly: time shifting git commits with Workinghours
</title>
      <link>https://blog.oddbit.com/post/2015-04-10-workinghours-time-shifting-git/</link>
      <pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2015-04-10-workinghours-time-shifting-git/</guid>
      <description>This is a terrible hack. If you are easily offended by bad ideas implemented poorly, move along!
You are working on a wonderful open source project&amp;hellip;but you are not supposed to be working on that project! You&amp;rsquo;re supposed to be doing your real work! Unfortunately, your extra-curricular activity is well documented in the git history of your project for all to see:
And now your boss knows why the TPS reports are late.</description>
    </item>
    
    <item>
      <title>Fixing RPM with evil magic</title>
      <link>https://blog.oddbit.com/post/2011-07-26-fixing-rpm-with-evil-magic/</link>
      <pubDate>Tue, 26 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2011-07-26-fixing-rpm-with-evil-magic/</guid>
      <description>Fixing rpmsign with evil magic At my office we are developing a deployment mechanism for RPM packages. The general workflow looks like this:
 You build a source rpm on your own machine. You sign the rpm with your GPG key. You submit the source RPM to our buildserver. The buildserver validates your signature and then builds the package. The buildserver signs the package using a master signing key.  The last step in that sequence represents a problem, because the rpmsign command will always, always prompt for a password and read the response from /dev/tty.</description>
    </item>
    
  </channel>
</rss>
