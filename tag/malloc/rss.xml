<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>malloc on The Odd Bit</title>
    <link>//blog.oddbit.com/tag/malloc/</link>
    <description>Recent content in malloc on The Odd Bit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="//blog.oddbit.com/tag/malloc/rss.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AVR micro-optimization: Losing malloc</title>
      <link>//blog.oddbit.com/post/2019-01-28-losing-malloc/</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>//blog.oddbit.com/post/2019-01-28-losing-malloc/</guid>
      <description>Pssst! Hey&amp;hellip;hey, buddy, wanna get an extra KB for cheap?
When I write OO-style code in C, I usually start with something like the following, in which I use malloc() to allocate memory for a variable of a particular type, perform some initialization actions, and then return it to the caller:
Button *button_new(uint8_t pin, uint8_t poll_freq) { Button *button = (Button *)malloc(sizeof(Button)); // do some initialization stuff return button; }  And when initially writing pipower, that&amp;rsquo;s exactly what I did.</description>
    </item>
    
  </channel>
</rss>