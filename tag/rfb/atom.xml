<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rfb on The Odd Bit</title>

  
  <link rel="self" href="https://blog.oddbit.com/tag/rfb/atom.xml"/>
  
  <link href="https://blog.oddbit.com/tag/rfb/" rel="alternate"></link>

  <updated>2010-02-04T00:00:00Z</updated>
  <id>https://blog.oddbit.com/tag/rfb/</id>
  
  <entry>
    <title>Blocking VNC with iptables</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2010-02-04-vnc-blockingrst/"/>
    <id>https://blog.oddbit.com/post/2010-02-04-vnc-blockingrst/</id>
    <published>2010-02-04T00:00:00Z</published>
    <updated>2010-02-04T00:00:00Z</updated>
    <summary type="html">VNC clients use the RFB protocol to provide virtual display capabilities. The RFB protocol, as implemented by most clients, provides very poor authentication options. While passwords are not actually sent &amp;ldquo;in the clear&amp;rdquo;, it is possible to brute force them based on information available on the wire. The RFB 3.x protocol limits passwords to a maximum of eight characters, so the potential key space is relatively small.
It&amp;rsquo;s possible to securely connect to a remote VNC server by tunneling your connection using ssh port forwarding (or setting up some sort of SSL proxy).</summary>
  </entry>
  
</feed>
