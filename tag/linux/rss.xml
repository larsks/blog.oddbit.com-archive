<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on The Odd Bit</title>
    <link>https://blog.oddbit.com/tag/linux/</link>
    <description>Recent content in linux on The Odd Bit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tag/linux/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Udev rules for CH340 serial devices</title>
      <link>https://blog.oddbit.com/post/2022-02-13-wemos-udev-rules/</link>
      <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2022-02-13-wemos-udev-rules/</guid>
      <description>I like to fiddle with Micropython, particularly on the Wemos D1 Mini, because these are such a neat form factor. Unfortunately, they have a cheap CH340 serial adapter on board, which means that from the perspective of Linux these devices are all functionally identical &amp;ndash; there&amp;rsquo;s no way to identify one device from another. This by itself would be a manageable problem, except that the device names assigned to these devices aren&amp;rsquo;t constant: depending on the order in which they get plugged in (and the order in which they are detected at boot), a device might be /dev/ttyUSB0 one day and /dev/ttyUSB2 another day.</description>
    </item>
    
    <item>
      <title>TM-V71A and Linux, part 1: Programming mode</title>
      <link>https://blog.oddbit.com/post/2019-10-03-tm-v71a-linux-part-1/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2019-10-03-tm-v71a-linux-part-1/</guid>
      <description>I recently acquired my Technician amateur radio license, and like many folks my first radio purchase was a Baofeng UV-5R. Due to its low cost, this is a very popular radio, and there is excellent open source software available for programming it in the form of the CHIRP project. After futzing around with the UV-5R for a while, I wanted to get something a little nicer for use at home, so I purchased a Kenwood TM-V71A.</description>
    </item>
    
    <item>
      <title>Rate limiting made simple</title>
      <link>https://blog.oddbit.com/post/2011-12-26-simple-rate-limiting/</link>
      <pubDate>Mon, 26 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2011-12-26-simple-rate-limiting/</guid>
      <description>I use CrashPlan as a backup service. It works and is very simple to set up, but has limited options for controlling bandwidth. In fact, if you&amp;rsquo;re running it on a headless system (e.g., a fileserver of some sort), your options are effectively &amp;ldquo;too slow&amp;rdquo; and &amp;ldquo;CONSUME EVERYTHING&amp;rdquo;. There is an open request to add time-based limitations to the application itself, but for now I&amp;rsquo;ve solved this using a very simple traffic shaping configuration.</description>
    </item>
    
    <item>
      <title>Patch to gPXE dhcp command</title>
      <link>https://blog.oddbit.com/post/2010-07-22-patch-to-gpxe-dhcp-command/</link>
      <pubDate>Thu, 22 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2010-07-22-patch-to-gpxe-dhcp-command/</guid>
      <description>Update: This patch has been accepted into gPXE.
I just released a patch to gPXE that modifies the dhcp command so that it can iterate over multiple interfaces. The stock dhcp command only accepts a single interface as an argument, which can be a problem if you are trying to boot on a machine with multiple interfaces. The builtin autoboot commands attempts to resolve this, but is only useful if you expect to receive appropriate boot parameters from your dhcp server.</description>
    </item>
    
    <item>
      <title>Blocking VNC with iptables</title>
      <link>https://blog.oddbit.com/post/2010-02-04-vnc-blockingrst/</link>
      <pubDate>Thu, 04 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2010-02-04-vnc-blockingrst/</guid>
      <description>VNC clients use the RFB protocol to provide virtual display capabilities. The RFB protocol, as implemented by most clients, provides very poor authentication options. While passwords are not actually sent &amp;ldquo;in the clear&amp;rdquo;, it is possible to brute force them based on information available on the wire. The RFB 3.x protocol limits passwords to a maximum of eight characters, so the potential key space is relatively small.
It&amp;rsquo;s possible to securely connect to a remote VNC server by tunneling your connection using ssh port forwarding (or setting up some sort of SSL proxy).</description>
    </item>
    
    <item>
      <title>Linux UPnP Gateway</title>
      <link>https://blog.oddbit.com/post/2010-01-29-linux-upnp-gateway/</link>
      <pubDate>Fri, 29 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2010-01-29-linux-upnp-gateway/</guid>
      <description>Like many other folks out there, I have several computers in my house connected to the outside world via a Linux box acting as a NAT gateway. I often want to use application such as BitTorrent and Freenet, which require that a number of ports be forwarded from my external connection to the particular computer on which I happen to be working. It turns out there&amp;rsquo;s a protocol for this, called UPnP.</description>
    </item>
    
  </channel>
</rss>
