<feed xmlns="http://www.w3.org/2005/Atom">
  <title>linux on The Odd Bit</title>

  
  <link rel="self" href="https://blog.oddbit.com/tag/linux/atom.xml"/>
  
  <link href="https://blog.oddbit.com/tag/linux/" rel="alternate"></link>

  <updated>2019-10-03T00:00:00Z</updated>
  <id>https://blog.oddbit.com/tag/linux/</id>
  
  <entry>
    <title>TM-V71A and Linux, part 1: Programming mode</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2019-10-03-tm-v71a-linux-part-1/"/>
    <id>https://blog.oddbit.com/post/2019-10-03-tm-v71a-linux-part-1/</id>
    <published>2019-10-03T00:00:00Z</published>
    <updated>2019-10-03T00:00:00Z</updated>
    <summary type="html">I recently acquired my Technician amateur radio license, and like many folks my first radio purchase was a Baofeng UV-5R. Due to its low cost, this is a very popular radio, and there is excellent open source software available for programming it in the form of the CHIRP project. After futzing around with the UV-5R for a while, I wanted to get something a little nicer for use at home, so I purchased a Kenwood TM-V71A.</summary>
  </entry>
  
  <entry>
    <title>Rate limiting made simple</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2011-12-26-simple-rate-limiting/"/>
    <id>https://blog.oddbit.com/post/2011-12-26-simple-rate-limiting/</id>
    <published>2011-12-26T00:00:00Z</published>
    <updated>2011-12-26T00:00:00Z</updated>
    <summary type="html">I use CrashPlan as a backup service. It works and is very simple to set up, but has limited options for controlling bandwidth. In fact, if you&amp;rsquo;re running it on a headless system (e.g., a fileserver of some sort), your options are effectively &amp;ldquo;too slow&amp;rdquo; and &amp;ldquo;CONSUME EVERYTHING&amp;rdquo;. There is an open request to add time-based limitations to the application itself, but for now I&amp;rsquo;ve solved this using a very simple traffic shaping configuration.</summary>
  </entry>
  
  <entry>
    <title>Patch to gPXE dhcp command</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2010-07-22-patch-to-gpxe-dhcp-command/"/>
    <id>https://blog.oddbit.com/post/2010-07-22-patch-to-gpxe-dhcp-command/</id>
    <published>2010-07-22T00:00:00Z</published>
    <updated>2010-07-22T00:00:00Z</updated>
    <summary type="html">Update: This patch has been accepted into gPXE.
I just released a patch to gPXE that modifies the dhcp command so that it can iterate over multiple interfaces. The stock dhcp command only accepts a single interface as an argument, which can be a problem if you are trying to boot on a machine with multiple interfaces. The builtin autoboot commands attempts to resolve this, but is only useful if you expect to receive appropriate boot parameters from your dhcp server.</summary>
  </entry>
  
  <entry>
    <title>Blocking VNC with iptables</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2010-02-04-vnc-blockingrst/"/>
    <id>https://blog.oddbit.com/post/2010-02-04-vnc-blockingrst/</id>
    <published>2010-02-04T00:00:00Z</published>
    <updated>2010-02-04T00:00:00Z</updated>
    <summary type="html">VNC clients use the RFB protocol to provide virtual display capabilities. The RFB protocol, as implemented by most clients, provides very poor authentication options. While passwords are not actually sent &amp;ldquo;in the clear&amp;rdquo;, it is possible to brute force them based on information available on the wire. The RFB 3.x protocol limits passwords to a maximum of eight characters, so the potential key space is relatively small.
It&amp;rsquo;s possible to securely connect to a remote VNC server by tunneling your connection using ssh port forwarding (or setting up some sort of SSL proxy).</summary>
  </entry>
  
  <entry>
    <title>Linux UPnP Gateway</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2010-01-29-linux-upnp-gateway/"/>
    <id>https://blog.oddbit.com/post/2010-01-29-linux-upnp-gateway/</id>
    <published>2010-01-29T00:00:00Z</published>
    <updated>2010-01-29T00:00:00Z</updated>
    <summary type="html">Like many other folks out there, I have several computers in my house connected to the outside world via a Linux box acting as a NAT gateway. I often want to use application such as BitTorrent and Freenet, which require that a number of ports be forwarded from my external connection to the particular computer on which I happen to be working. It turns out there&amp;rsquo;s a protocol for this, called UPnP.</summary>
  </entry>
  
</feed>
