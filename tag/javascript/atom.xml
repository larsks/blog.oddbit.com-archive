<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Odd Bit</title>

  
  <link rel="self" href="https://blog.oddbit.com/tag/javascript/atom.xml"/>
  
  <link href="https://blog.oddbit.com/tag/javascript/" rel="alternate"></link>

  <updated>2013-11-23T00:00:00Z</updated>
  <id>https://blog.oddbit.com/tag/javascript/</id>
  <entry>
    <title>Long polling with Javascript and Python</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2013-11-23-long-polling-with-ja/"/>
    <id>https://blog.oddbit.com/post/2013-11-23-long-polling-with-ja/</id>
    <published>2013-11-23T00:00:00Z</published>
    <updated>2013-11-23T00:00:00Z</updated>
    <summary type="html">In this post I&amp;rsquo;m going to step through an example web chat system implemented in Python (with Bottle and gevent) that uses long polling to implement a simple publish/subscribe mechanism for efficiently updating connected clients.
My pubsub_example repository on GitHub has a complete project that implements the ideas discussed in this article. This project can be deployed directly on OpenShift if you want to try things out on your own. You can also try it out online at http://pubsub.</summary>
  </entry>
  
  <entry>
    <title>Sockets on OpenShift</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2013-11-23-openshift-socket-pro/"/>
    <id>https://blog.oddbit.com/post/2013-11-23-openshift-socket-pro/</id>
    <published>2013-11-23T00:00:00Z</published>
    <updated>2013-11-23T00:00:00Z</updated>
    <summary type="html">In this article, a followup to my previous post regarding long-poll servers and Python, we investigate the code changes that were necessary to make the code work when deployed on OpenShift.
In the previous post, we implemented IO polling to watch for client disconnects at the same time we were waiting for messages on a message bus:
poll = zmq.Poller() poll.register(subsock, zmq.POLLIN) poll.register(rfile, zmq.POLLIN) events = dict(poll.poll()) . . .  If you were to try this at home, you would find that everything worked as described&amp;hellip;but if you were to deploy the same code to OpenShift, you would find that the problem we were trying to solve (the server holding file descriptors open after a client disconnected) would still exist.</summary>
  </entry>
  
</feed>
