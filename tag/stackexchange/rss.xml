<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>stackexchange on The Odd Bit</title>
    <link>https://blog.oddbit.com/tag/stackexchange/</link>
    <description>Recent content in stackexchange on The Odd Bit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tag/stackexchange/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A pair of userscripts for cleaning up Stack Exchange sites</title>
      <link>https://blog.oddbit.com/post/2021-09-05-sx-question-filters/</link>
      <pubDate>Sun, 05 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2021-09-05-sx-question-filters/</guid>
      <description>I&amp;rsquo;ve been a regular visitor to Stack Overflow and other Stack Exchange sites over the years, and while I&amp;rsquo;ve mostly enjoyed the experience, I&amp;rsquo;ve been frustrated by the lack of control I have over what questions I see. I&amp;rsquo;m not really interested in looking at questions that have already been closed, or that have a negative score, but there&amp;rsquo;s no native facility for filtering questions like this.
I finally spent the time learning just enough JavaScript to hurt myself to put together a pair of scripts that let me present the questions that way I want:</description>
    </item>
    
    <item>
      <title>Unpacking a Python regular expression</title>
      <link>https://blog.oddbit.com/post/2019-05-07-unpacking-a-python-regular-exp/</link>
      <pubDate>Tue, 07 May 2019 10:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2019-05-07-unpacking-a-python-regular-exp/</guid>
      <description>I recently answered a question from Harsha Nalore on StackOverflow that involved using Ansible to extract the output of a command sent to a BigIP device of some sort. My solution &amp;ndash; which I claim to be functional, but probably not optimal &amp;ndash; involved writing an Ansible filter module to parse the output. That filter made use of a complex-looking regular expression. Harsha asked for some details on that regular expression works, and the existing StackOverflow answer didn&amp;rsquo;t really seem the write place for that: so, here we are.</description>
    </item>
    
  </channel>
</rss>
