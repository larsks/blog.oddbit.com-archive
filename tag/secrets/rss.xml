<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>secrets on The Odd Bit</title>
    <link>https://blog.oddbit.com/tag/secrets/</link>
    <description>Recent content in secrets on The Odd Bit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oddbit.com/tag/secrets/rss.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes External Secrets</title>
      <link>https://blog.oddbit.com/post/2021-08-29-kubernetes-external-secrets/</link>
      <pubDate>Sun, 29 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2021-08-29-kubernetes-external-secrets/</guid>
      <description>At $JOB we maintain the configuration for our OpenShift clusters in a public git repository. Changes in the git repository are applied automatically using ArgoCD and Kustomize. This works great, but the public nature of the repository means we need to find a secure solution for managing secrets (such as passwords and other credentials necessary for authenticating to external services). In particular, we need a solution that permits our public repository to be the source of truth for our cluster configuration, without compromising our credentials.</description>
    </item>
    
    <item>
      <title>Docker build learns about secrets and ssh agent forwarding</title>
      <link>https://blog.oddbit.com/post/2019-02-24-docker-build-learns-about-secr/</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oddbit.com/post/2019-02-24-docker-build-learns-about-secr/</guid>
      <description>A common problem for folks working with Docker is accessing resources which require authentication during the image build step. A particularly common use case is getting access to private git repositories using ssh key-based authentication. Until recently there hasn&amp;rsquo;t been a great solution:
 you can embed secrets in your image, but now you can&amp;rsquo;t share the image with anybody. you can use build arguments, but this requires passing in an unenecrypted private key on the docker build command line, which is suboptimal for a number of reasons you can perform all the steps requiring authentication at runtime, but this can needlessly complicate your container startup process.</description>
    </item>
    
  </channel>
</rss>
