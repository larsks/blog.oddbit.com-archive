<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Odd Bit</title>

  
  <link rel="self" href="https://blog.oddbit.com/tag/secrets/atom.xml"/>
  
  <link href="https://blog.oddbit.com/tag/secrets/" rel="alternate"></link>

  <updated>2021-09-03T00:00:00Z</updated>
  <id>https://blog.oddbit.com/tag/secrets/</id>
  <entry>
    <title>Kubernetes External Secrets</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-09-03-kubernetes-external-secrets/"/>
    <id>https://blog.oddbit.com/post/2021-09-03-kubernetes-external-secrets/</id>
    <published>2021-09-03T00:00:00Z</published>
    <updated>2021-09-03T00:00:00Z</updated>
    <summary type="html">At $JOB we maintain the configuration for our OpenShift clusters in a public git repository. Changes in the git repository are applied automatically using ArgoCD and Kustomize. This works great, but the public nature of the repository means we need to find a secure solution for managing secrets (such as passwords and other credentials necessary for authenticating to external services). In particular, we need a solution that permits our public repository to be the source of truth for our cluster configuration, without compromising our credentials.</summary>
  </entry>
  
  <entry>
    <title>Docker build learns about secrets and ssh agent forwarding</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2019-02-24-docker-build-learns-about-secr/"/>
    <id>https://blog.oddbit.com/post/2019-02-24-docker-build-learns-about-secr/</id>
    <published>2019-02-24T00:00:00Z</published>
    <updated>2019-02-24T00:00:00Z</updated>
    <summary type="html">A common problem for folks working with Docker is accessing resources which require authentication during the image build step. A particularly common use case is getting access to private git repositories using ssh key-based authentication. Until recently there hasn&amp;rsquo;t been a great solution:
 you can embed secrets in your image, but now you can&amp;rsquo;t share the image with anybody. you can use build arguments, but this requires passing in an unenecrypted private key on the docker build command line, which is suboptimal for a number of reasons you can perform all the steps requiring authentication at runtime, but this can needlessly complicate your container startup process.</summary>
  </entry>
  
</feed>
