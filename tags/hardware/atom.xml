<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hardware on The Odd Bit</title>

  
  <link rel="self" href="http://blog.oddbit.com/tags/hardware/atom.xml"/>
  
  <link href="http://blog.oddbit.com/tags/hardware/" rel="alternate"></link>

  <updated>2018-03-27T00:00:00Z</updated>
  <id>http://blog.oddbit.com/tags/hardware/</id>
  
  <entry>
    <title>Multiple 1-Wire Buses on the Raspberry Pi</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2018-03-27-multiple-1-wire-buses-on-the-/"/>
    <id>http://blog.oddbit.com/post/2018-03-27-multiple-1-wire-buses-on-the-/</id>
    <published>2018-03-27T00:00:00Z</published>
    <updated>2018-03-27T00:00:00Z</updated>
    <summary>The DS18B20 is a popular temperature sensor that uses the 1-Wire protocol for communication. Recent versions of the Linux kernel include a kernel driver for this protocol, making it relatively convenient to connect one or more of these devices to a Raspberry Pi or similar device. 1-Wire devices can be daisy chained, so it is possible to connect several devices to your Pi using only a single GPIO pin, and you&amp;rsquo;ll find many articles out there that describe how to do so.</summary>
  </entry>
  
  <entry>
    <title>I2C on the Raspberry Pi</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2013-03-12-i2c-on-the-raspberry/"/>
    <id>http://blog.oddbit.com/post/2013-03-12-i2c-on-the-raspberry/</id>
    <published>2013-03-12T00:00:00Z</published>
    <updated>2013-03-12T00:00:00Z</updated>
    <summary>I&amp;rsquo;ve set up my Raspberry Pi to communicate with my Arduino via I2C. The Raspberry Pi is a 3.3v device and the Arduino is a 5v device. While in general this means that you need to use a level converter when connecting the two devices, you don&amp;rsquo;t need to use a level converter when connecting the Arduino to the Raspberry Pi via I2C.
The design of the I2C bus is such that the only device driving a voltage on the bus is the master (in this case, the Raspberry Pi), via pull-up resistors.</summary>
  </entry>
  
  <entry>
    <title>Interrupt driven GPIO with Python</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2013-03-08-interrupt-driven-gpi/"/>
    <id>http://blog.oddbit.com/post/2013-03-08-interrupt-driven-gpi/</id>
    <published>2013-03-08T00:00:00Z</published>
    <updated>2013-03-08T00:00:00Z</updated>
    <summary>There are several Python libraries out there for interacting with the GPIO pins on a Raspberry Pi:
 RPi.GPIO The WiringPi bindings for Python, and The Quick2Wire Python API (which depends on Python 3)  All of them are reasonably easy to use, but the Quick2Wire API provides a uniquely useful feature: epoll-enabled GPIO interrupts. This makes it trivial to write code that efficiently waits for and responds to things like button presses.</summary>
  </entry>
  
  <entry>
    <title>Controlling a servo with your Arduino</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2013-03-07-controlling-a-servo/"/>
    <id>http://blog.oddbit.com/post/2013-03-07-controlling-a-servo/</id>
    <published>2013-03-07T00:00:00Z</published>
    <updated>2013-03-07T00:00:00Z</updated>
    <summary>I&amp;rsquo;ve recently started playing with an Arduino kit I purchased a year ago (and only just now got around to unboxing). I purchased the kit from SparkFun, and it includes a motley collection of resistors, LEDs, a motor, a servo, and more.
I was fiddling around with this exercise, which uses the SoftwareServo library to control a servo. Using this library, you just pass it an angle and the library takes care of everything else, e.</summary>
  </entry>
  
</feed>
