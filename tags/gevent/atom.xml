<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gevent on The Odd Bit</title>

  <link rel="self" href="http://blog.oddbit.com/tags/gevent/"/>
  <link href="//blog.oddbit.com/" rel="alternate"></link>                                      â”‚1557152283 127.0.0.1 "GET /dist/styles.css" 304 136 "http://localhost:1313/" "Mozilla/5.0 (X11;

  <updated>2013-11-23T00:00:00+0000</updated>
  <id>http://blog.oddbit.com/tags/gevent/</id>
  
  <entry>
    <title>Long polling with Javascript and Python</title>
    <link rel="alternate" href="http://blog.oddbit.com/post/2013-11-23-long-polling-with-ja/"/>
    <id>http://blog.oddbit.com/post/2013-11-23-long-polling-with-ja/</id>
    <published>2013-11-23T00:00:00+0000</published>
    <updated>2013-11-23T00:00:00+0000</updated>
    <summary>In this post I&amp;rsquo;m going to step through an example web chat system implemented in Python (with Bottle and gevent) that uses long polling to implement a simple publish/subscribe mechanism for efficiently updating connected clients.
My pubsub_example repository on GitHub has a complete project that implements the ideas discussed in this article. This project can be deployed directly on OpenShift if you want to try things out on your own.</summary>
  </entry>
  
</feed>
