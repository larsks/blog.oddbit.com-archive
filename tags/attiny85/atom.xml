<feed xmlns="http://www.w3.org/2005/Atom">
  <title>attiny85 on The Odd Bit</title>

  <link rel="self" href="/tags/attiny85/"/>
  <link href="//blog.oddbit.com/" rel="alternate"></link>                                      â”‚1557152283 127.0.0.1 "GET /dist/styles.css" 304 136 "http://localhost:1313/" "Mozilla/5.0 (X11;

  <updated>2019-01-28T00:00:00+0000</updated>
  <id>/tags/attiny85/</id>
  
  <entry>
    <title>AVR micro-optimization: Avr-gcc and --short-enums</title>
    <link rel="alternate" href="/post/2019-01-28-avr-gcc-short-enums/"/>
    <id>/post/2019-01-28-avr-gcc-short-enums/</id>
    <published>2019-01-28T00:00:00+0000</published>
    <updated>2019-01-28T00:00:00+0000</updated>
    <summary>How big is an enum? I noticed something odd while browsing through the assembly output of some AVR C code I wrote recently. In the code, I have the following expression:
int main() { setup(); while (state != STATE_QUIT) { loop(); } }  Here, state is a variable of type enum STATE, which looks something like this (not exactly like this; there are actually 19 possible values but I didn&amp;rsquo;t want to clutter this post with unnecessary code listings):</summary>
  </entry>
  
  <entry>
    <title>AVR micro-optimization: Losing malloc</title>
    <link rel="alternate" href="/post/2019-01-28-losing-malloc/"/>
    <id>/post/2019-01-28-losing-malloc/</id>
    <published>2019-01-28T00:00:00+0000</published>
    <updated>2019-01-28T00:00:00+0000</updated>
    <summary>Pssst! Hey&amp;hellip;hey, buddy, wanna get an extra KB for cheap?
When write OO-style code in C, I usually start with something like the following, in which I use malloc() to allocate memory for a variable of a particular type, perform some initialization actions, and then return it to the caller:
Button *button_new(uint8_t pin, uint8_t poll_freq) { Button *button = (Button *)malloc(sizeof(Button)); // do some initialization stuff return button; }  And when initially writing pipower, that&amp;rsquo;s exactly what I did.</summary>
  </entry>
  
  <entry>
    <title>Debugging attiny85 code, part 1: simavr and gdb</title>
    <link rel="alternate" href="/post/2019-01-22-debugging-attiny-code-pt-1/"/>
    <id>/post/2019-01-22-debugging-attiny-code-pt-1/</id>
    <published>2019-01-22T00:00:00+0000</published>
    <updated>2019-01-22T00:00:00+0000</updated>
    <summary>In a case of awful timing, after my recent project involving some attiny85 programming I finally got around to learning how to use simavr and gdb to help debug my AVR code. It was too late for me (and I will never get the time back that I spent debugging things with an LED and lots of re-flashing), but maybe this will help someone else!
I&amp;rsquo;ve split this into three posts:</summary>
  </entry>
  
  <entry>
    <title>Debugging attiny85 code, part 2: Automating GDB with scripts</title>
    <link rel="alternate" href="/post/2019-01-22-debugging-attiny-code-pt-2/"/>
    <id>/post/2019-01-22-debugging-attiny-code-pt-2/</id>
    <published>2019-01-22T00:00:00+0000</published>
    <updated>2019-01-22T00:00:00+0000</updated>
    <summary>This is the second of three posts about using gdb and simavr to debug AVR code. The complete series is:
 Part 1: Using GDB
A walkthrough of using GDB to manually inspect the behavior of our code.
 Part 2: Automating GDB with scripts
Creating GDB scripts to automatically test the behavior of our code.
 Part 3: Tracing with simavr
Using simavr to collect information about the state of microcontroller pins while our code is running.</summary>
  </entry>
  
  <entry>
    <title>Debugging attiny85 code, part 3: Tracing with simavr</title>
    <link rel="alternate" href="/post/2019-01-22-debugging-attiny-code-pt-3/"/>
    <id>/post/2019-01-22-debugging-attiny-code-pt-3/</id>
    <published>2019-01-22T00:00:00+0000</published>
    <updated>2019-01-22T00:00:00+0000</updated>
    <summary>This is the third of three posts about using gdb and simavr to debug AVR code. The complete series is:
 Part 1: Using GDB
A walkthrough of using GDB to manually inspect the behavior of our code.
 Part 2: Automating GDB with scripts
Creating GDB scripts to automatically test the behavior of our code.
 Part 3: Tracing with simavr
Using simavr to collect information about the state of microcontroller pins while our code is running.</summary>
  </entry>
  
  <entry>
    <title>PiPower: A Raspberry Pi UPS</title>
    <link rel="alternate" href="/post/2019-01-19-pipower-a-raspberry-pi-ups/"/>
    <id>/post/2019-01-19-pipower-a-raspberry-pi-ups/</id>
    <published>2019-01-19T00:00:00+0000</published>
    <updated>2019-01-19T00:00:00+0000</updated>
    <summary>I have a Raspberry Pi running RetroPie hooked up to a television. It&amp;rsquo;s powered from a USB port on the TV, which is convenient, but it means that whenever we shut off the TV we&amp;rsquo;re pulling the plug on the Pi. While there haven&amp;rsquo;t been any problems so far, this is a classic recipe for filesystem problems or data loss at some point. I started looking into UPS options to alleviate this issue.</summary>
  </entry>
  
</feed>
