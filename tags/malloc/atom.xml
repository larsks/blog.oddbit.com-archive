<feed xmlns="http://www.w3.org/2005/Atom">
  <title>malloc on The Odd Bit</title>

  <link rel="self" href="http://blog.oddbit.com/tags/malloc/"/>
  <link href="//blog.oddbit.com/" rel="alternate"></link>                                      â”‚1557152283 127.0.0.1 "GET /dist/styles.css" 304 136 "http://localhost:1313/" "Mozilla/5.0 (X11;

  <updated>2019-01-28T00:00:00+0000</updated>
  <id>http://blog.oddbit.com/tags/malloc/</id>
  
  <entry>
    <title>AVR micro-optimization: Losing malloc</title>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-28-losing-malloc/"/>
    <id>http://blog.oddbit.com/post/2019-01-28-losing-malloc/</id>
    <published>2019-01-28T00:00:00+0000</published>
    <updated>2019-01-28T00:00:00+0000</updated>
    <summary>Pssst! Hey&amp;hellip;hey, buddy, wanna get an extra KB for cheap?
When write OO-style code in C, I usually start with something like the following, in which I use malloc() to allocate memory for a variable of a particular type, perform some initialization actions, and then return it to the caller:
Button *button_new(uint8_t pin, uint8_t poll_freq) { Button *button = (Button *)malloc(sizeof(Button)); // do some initialization stuff return button; }  And when initially writing pipower, that&amp;rsquo;s exactly what I did.</summary>
  </entry>
  
</feed>
