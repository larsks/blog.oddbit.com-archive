<feed xmlns="http://www.w3.org/2005/Atom">
  <title>simavr on The Odd Bit</title>

  
  <link rel="self" href="http://blog.oddbit.com/tags/simavr/atom.xml"/>
  
  <link href="http://blog.oddbit.com/tags/simavr/" rel="alternate"></link>                                      â”‚1557152283 127.0.0.1 "GET /dist/styles.css" 304 136 "http://localhost:1313/" "Mozilla/5.0 (X11;

  <updated>2019-01-22T00:00:00Z</updated>
  <id>http://blog.oddbit.com/tags/simavr/</id>
  
  <entry>
    <title>Debugging attiny85 code, part 1: simavr and gdb</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-1/"/>
    <id>http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-1/</id>
    <published>2019-01-22T00:00:00Z</published>
    <updated>2019-01-22T00:00:00Z</updated>
    <summary>In a case of awful timing, after my recent project involving some attiny85 programming I finally got around to learning how to use simavr and gdb to help debug my AVR code. It was too late for me (and I will never get the time back that I spent debugging things with an LED and lots of re-flashing), but maybe this will help someone else!
I&amp;rsquo;ve split this into three posts:</summary>
  </entry>
  
  <entry>
    <title>Debugging attiny85 code, part 2: Automating GDB with scripts</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-2/"/>
    <id>http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-2/</id>
    <published>2019-01-22T00:00:00Z</published>
    <updated>2019-01-22T00:00:00Z</updated>
    <summary>This is the second of three posts about using gdb and simavr to debug AVR code. The complete series is:
 Part 1: Using GDB
A walkthrough of using GDB to manually inspect the behavior of our code.
 Part 2: Automating GDB with scripts
Creating GDB scripts to automatically test the behavior of our code.
 Part 3: Tracing with simavr
Using simavr to collect information about the state of microcontroller pins while our code is running.</summary>
  </entry>
  
  <entry>
    <title>Debugging attiny85 code, part 3: Tracing with simavr</title>
    <author>Lars Kellogg-Stedman</author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-3/"/>
    <id>http://blog.oddbit.com/post/2019-01-22-debugging-attiny-code-pt-3/</id>
    <published>2019-01-22T00:00:00Z</published>
    <updated>2019-01-22T00:00:00Z</updated>
    <summary>This is the third of three posts about using gdb and simavr to debug AVR code. The complete series is:
 Part 1: Using GDB
A walkthrough of using GDB to manually inspect the behavior of our code.
 Part 2: Automating GDB with scripts
Creating GDB scripts to automatically test the behavior of our code.
 Part 3: Tracing with simavr
Using simavr to collect information about the state of microcontroller pins while our code is running.</summary>
  </entry>
  
</feed>
