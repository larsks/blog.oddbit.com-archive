<feed xmlns="http://www.w3.org/2005/Atom">
  <title>powershell on The Odd Bit</title>

  
  <link rel="self" href="http://blog.oddbit.com/tags/powershell/atom.xml"/>
  
  <link href="http://blog.oddbit.com/tags/powershell/" rel="alternate"></link>

  <updated>2012-11-04T00:00:00Z</updated>
  <id>http://blog.oddbit.com/tags/powershell/</id>
  
  <entry>
    <title>Generating random passwords in PowerShell</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2012-11-04-powershell-random-passwords/"/>
    <id>http://blog.oddbit.com/post/2012-11-04-powershell-random-passwords/</id>
    <published>2012-11-04T00:00:00Z</published>
    <updated>2012-11-04T00:00:00Z</updated>
    <summary type="html">I was looking for PowerShell solutions for generating a random password (in order to set the Administrator password on a Windows instance provisioned in OpenStack), and found several solutions using the GeneratePassword method of System.Web.Security.Membership (documentation here), along the lines of this:
Function New-RandomComplexPassword ($length=8) { $Assembly = Add-Type -AssemblyName System.Web $password = [System.Web.Security.Membership]::GeneratePassword($length,2) return $password }  While this works, I was unhappy with the generated passwords: they were difficult to type or transcribe because they make heavy use of punctuation.</summary>
  </entry>
  
  <entry>
    <title>Waiting for networking using PowerShell</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="http://blog.oddbit.com/post/2012-11-04-powershell-wait-for-networking/"/>
    <id>http://blog.oddbit.com/post/2012-11-04-powershell-wait-for-networking/</id>
    <published>2012-11-04T00:00:00Z</published>
    <updated>2012-11-04T00:00:00Z</updated>
    <summary type="html">I&amp;rsquo;ve recently been exploring the world of Windows scripting, and I ran into a small problem: I was running a script at system startup, and the script was running before the network interface (which was using DHCP) was configured.
There are a number of common solutions proposed to this problem:
 Just wait for some period of time.
This can work but it&amp;rsquo;s ugly, and because it doesn&amp;rsquo;t actually verify the network state it can result in things breaking if some problem prevents Windows from pulling a valid DHCP lease.</summary>
  </entry>
  
</feed>
