<feed xmlns="http://www.w3.org/2005/Atom">
  <title>puppet on The Odd Bit</title>

  <link rel="self" href="/tags/puppet/"/>
  <link href="//blog.oddbit.com/" rel="alternate"></link>                                      â”‚1557152283 127.0.0.1 "GET /dist/styles.css" 304 136 "http://localhost:1313/" "Mozilla/5.0 (X11;

  <updated>2014-10-22T00:00:00+0000</updated>
  <id>/tags/puppet/</id>
  
  <entry>
    <title>Building Docker images with Puppet</title>
    <link rel="alternate" href="/post/2014-10-22-building-docker-images-with-pu/"/>
    <id>/post/2014-10-22-building-docker-images-with-pu/</id>
    <published>2014-10-22T00:00:00+0000</published>
    <updated>2014-10-22T00:00:00+0000</updated>
    <summary>I like Docker, but I&amp;rsquo;m not a huge fan of using shell scripts for complex system configuration&amp;hellip;and Dockerfiles are basically giant shell scripts.
I was curious whether or not it would be possible to use Puppet during the docker build process. As a test case, I used the ssh module included in the openstack-puppet-modules package.
I started with a manifest like this (in puppet/node.pp):
class { &#39;ssh&#39;: }  And a Dockerfile like this:</summary>
  </entry>
  
  <entry>
    <title>Extending Puppet</title>
    <link rel="alternate" href="/post/2014-04-16-article-on-extending-puppet/"/>
    <id>/post/2014-04-16-article-on-extending-puppet/</id>
    <published>2014-04-16T00:00:00+0000</published>
    <updated>2014-04-16T00:00:00+0000</updated>
    <summary>I wanted to learn about writing custom Puppet types and providers. The official documentation is a little sparse, but I finally stumbled upon the following series of articles by Gary Larizza that provide a great deal of insight into the process and a bunch of example code:
 Fun With Puppet Providers Who Abstracted My Ruby? Seriously, What Is This Provider Doing?  </summary>
  </entry>
  
  <entry>
    <title>A quote about XMLRPC</title>
    <link rel="alternate" href="/post/2013-02-25-puppet-xmlrpc-quote/"/>
    <id>/post/2013-02-25-puppet-xmlrpc-quote/</id>
    <published>2013-02-25T00:00:00+0000</published>
    <updated>2013-02-25T00:00:00+0000</updated>
    <summary>I&amp;rsquo;ve been reading up on Puppet 3 lately, and came across the following:
 XMLRPC was the new hotness when development on Puppet started. Now, XMLRPC is that horrible thing with the XML and the angle brackets and the pain and sad.
 (from http://somethingsinistral.net/blog/the-angry-guide-to-puppet-3/)
&amp;hellip;which also accurately sums up my feelings when I come across yet another piece of software where someone has decided that XML (or even JSON) is a good user-facing configuration syntax.</summary>
  </entry>
  
  <entry>
    <title>Puppet, scope, and inheritance</title>
    <link rel="alternate" href="/post/2011-08-16-puppet-scope-and-inheritance/"/>
    <id>/post/2011-08-16-puppet-scope-and-inheritance/</id>
    <published>2011-08-16T00:00:00+0000</published>
    <updated>2011-08-16T00:00:00+0000</updated>
    <summary>I note this here because it wasn&amp;rsquo;t apparent to me from the Puppet documentation.
If you have a Puppet class like this:
class foo { File { ensure =&amp;gt; file, mode =&amp;gt; 600, } }  And you use it like this:
class bar { include foo file { &#39;/tmp/myfile&#39;: } }  Then /tmp/myfile will not be created. But if instead you do this:
class bar inherits foo { file { &#39;/tmp/myfile&#39;: } }  It will be created with mode 0600.</summary>
  </entry>
  
</feed>
