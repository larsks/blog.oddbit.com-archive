<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Odd Bit</title>

  
  <link rel="self" href="https://blog.oddbit.com/category/tech/atom.xml"/>
  
  <link href="https://blog.oddbit.com/category/tech/" rel="alternate"></link>

  <updated>2022-09-22T00:00:00Z</updated>
  <id>https://blog.oddbit.com/category/tech/</id>
  <entry>
    <title>Delete GitHub workflow runs using the gh cli</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2022-09-22-delete-workflow-runs/"/>
    <id>https://blog.oddbit.com/post/2022-09-22-delete-workflow-runs/</id>
    <published>2022-09-22T00:00:00Z</published>
    <updated>2022-09-22T00:00:00Z</updated>
    <summary type="html">Hello, future me. This is for you next time you want to do this.
When setting up the CI for a project I will sometimes end up with a tremendous clutter of workflow runs. Sometimes they have embarrassing mistakes. Who wants to show that to people? I was trying to figure out how to bulk delete workflow runs from the CLI, and I came up with something that works:
gh run list --json databaseId -q &#39;.</summary>
  </entry>
  
  <entry>
    <title>Investigating connection timeouts in a Kubernetes application</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2022-09-10-kubernetes-labels/"/>
    <id>https://blog.oddbit.com/post/2022-09-10-kubernetes-labels/</id>
    <published>2022-09-10T00:00:00Z</published>
    <updated>2022-09-10T00:00:00Z</updated>
    <summary type="html">We are working with an application that produces resource utilization reports for clients of our OpenShift-based cloud environments. The developers working with the application have been reporting mysterious issues concerning connection timeouts between the application and the database (a MariaDB instance). For a long time we had only high-level verbal descriptions of the problem (&amp;ldquo;I&amp;rsquo;m seeing a lot of connection timeouts!&amp;quot;) and a variety of unsubstantiated theories (from multiple sources) about the cause.</summary>
  </entry>
  
  <entry>
    <title>Directing different ports to different containers with Traefik</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2022-06-20-traefik-multiple-listeners/"/>
    <id>https://blog.oddbit.com/post/2022-06-20-traefik-multiple-listeners/</id>
    <published>2022-06-20T00:00:00Z</published>
    <updated>2022-06-20T00:00:00Z</updated>
    <summary type="html">This post is mostly for myself: I find the Traefik documentation hard to navigate, so having figured this out in response to a question on Stack Overflow, I&amp;rsquo;m putting it here to help it stick in my head.
The question asks essentially how to perform port-based routing of requests to containers, so that a request for http://example.com goes to one container while a request for http://example.com:9090 goes to a different container.</summary>
  </entry>
  
  <entry>
    <title>Udev rules for CH340 serial devices</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2022-02-13-wemos-udev-rules/"/>
    <id>https://blog.oddbit.com/post/2022-02-13-wemos-udev-rules/</id>
    <published>2022-02-13T00:00:00Z</published>
    <updated>2022-02-13T00:00:00Z</updated>
    <summary type="html">I like to fiddle with Micropython, particularly on the Wemos D1 Mini, because these are such a neat form factor. Unfortunately, they have a cheap CH340 serial adapter on board, which means that from the perspective of Linux these devices are all functionally identical &amp;ndash; there&amp;rsquo;s no way to identify one device from another. This by itself would be a manageable problem, except that the device names assigned to these devices aren&amp;rsquo;t constant: depending on the order in which they get plugged in (and the order in which they are detected at boot), a device might be /dev/ttyUSB0 one day and /dev/ttyUSB2 another day.</summary>
  </entry>
  
  <entry>
    <title>A pair of userscripts for cleaning up Stack Exchange sites</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-09-05-sx-question-filters/"/>
    <id>https://blog.oddbit.com/post/2021-09-05-sx-question-filters/</id>
    <published>2021-09-05T00:00:00Z</published>
    <updated>2021-09-05T00:00:00Z</updated>
    <summary type="html">I&amp;rsquo;ve been a regular visitor to Stack Overflow and other Stack Exchange sites over the years, and while I&amp;rsquo;ve mostly enjoyed the experience, I&amp;rsquo;ve been frustrated by the lack of control I have over what questions I see. I&amp;rsquo;m not really interested in looking at questions that have already been closed, or that have a negative score, but there&amp;rsquo;s no native facility for filtering questions like this.
I finally spent the time learning just enough JavaScript to hurt myself to put together a pair of scripts that let me present the questions that way I want:</summary>
  </entry>
  
  <entry>
    <title>Kubernetes External Secrets</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-09-03-kubernetes-external-secrets/"/>
    <id>https://blog.oddbit.com/post/2021-09-03-kubernetes-external-secrets/</id>
    <published>2021-09-03T00:00:00Z</published>
    <updated>2021-09-03T00:00:00Z</updated>
    <summary type="html">At $JOB we maintain the configuration for our OpenShift clusters in a public git repository. Changes in the git repository are applied automatically using ArgoCD and Kustomize. This works great, but the public nature of the repository means we need to find a secure solution for managing secrets (such as passwords and other credentials necessary for authenticating to external services). In particular, we need a solution that permits our public repository to be the source of truth for our cluster configuration, without compromising our credentials.</summary>
  </entry>
  
  <entry>
    <title>Connecting OpenShift to an External Ceph Cluster</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-08-23-external-ocs/"/>
    <id>https://blog.oddbit.com/post/2021-08-23-external-ocs/</id>
    <published>2021-08-23T00:00:00Z</published>
    <updated>2021-08-23T00:00:00Z</updated>
    <summary type="html">Red Hat&amp;rsquo;s OpenShift Data Foundation (formerly &amp;ldquo;OpenShift Container Storage&amp;rdquo;, or &amp;ldquo;OCS&amp;rdquo;) allows you to either (a) automatically set up a Ceph cluster as an application running on your OpenShift cluster, or (b) connect your OpenShift cluster to an externally managed Ceph cluster. While setting up Ceph as an OpenShift application is a relatively polished experienced, connecting to an external cluster still has some rough edges.
NB I am not a Ceph expert.</summary>
  </entry>
  
  <entry>
    <title>Creating a VXLAN overlay network with Open vSwitch</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-04-17-vm-ovs-vxlan/"/>
    <id>https://blog.oddbit.com/post/2021-04-17-vm-ovs-vxlan/</id>
    <published>2021-04-17T00:00:00Z</published>
    <updated>2021-04-17T00:00:00Z</updated>
    <summary type="html">In this post, we&amp;rsquo;ll walk through the process of getting virtual machines on two different hosts to communicate over an overlay network created using the support for VXLAN in Open vSwitch (or OVS).
The test environment For this post, I&amp;rsquo;ll be working with two systems:
 node0.ovs.virt at address 192.168.122.107 node1.ovs.virt at address 192.168.122.174  These hosts are running CentOS 8, although once we get past the package installs the instructions will be similar for other distributions.</summary>
  </entry>
  
  <entry>
    <title>Getting started with KSOPS</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/"/>
    <id>https://blog.oddbit.com/post/2021-03-09-getting-started-with-ksops/</id>
    <published>2021-03-09T00:00:00Z</published>
    <updated>2021-03-09T00:00:00Z</updated>
    <summary type="html">Kustomize is a tool for assembling Kubernetes manifests from a collection of files. We&amp;rsquo;re making extensive use of Kustomize in the operate-first project. In order to keep secrets stored in our configuration repositories, we&amp;rsquo;re using the KSOPS plugin, which enables Kustomize to use sops to encrypt/files using GPG.
In this post, I&amp;rsquo;d like to walk through the steps necessary to get everything up and running.
Set up GPG We encrypt files using GPG, so the first step is making sure that you have a GPG keypair and that your public key is published where other people can find it.</summary>
  </entry>
  
  <entry>
    <title>Tools for writing about Git</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-02-27-git-doc-tools/"/>
    <id>https://blog.oddbit.com/post/2021-02-27-git-doc-tools/</id>
    <published>2021-02-27T00:00:00Z</published>
    <updated>2021-02-27T00:00:00Z</updated>
    <summary type="html">I sometimes find myself writing articles or documentation about git, so I put together a couple of terrible hacks for generating reproducible histories and pretty graphs of those histories.
git synth The git synth command reads a YAML description of a repository and executes the necessary commands to reproduce that history. It allows you set the name and email address of the author and committer as well as static date, so you every time you generate the repository you can identical commit ids.</summary>
  </entry>
  
  <entry>
    <title>File reorganization</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-02-24-file-reorganization/"/>
    <id>https://blog.oddbit.com/post/2021-02-24-file-reorganization/</id>
    <published>2021-02-24T00:00:00Z</published>
    <updated>2021-02-24T00:00:00Z</updated>
    <summary type="html">This is just a note that I&amp;rsquo;ve substantially changed how the post sources are organized. I&amp;rsquo;ve tried to ensure that I preserve all the existing links, but if you spot something missing please feel free to leave a comment on this post.</summary>
  </entry>
  
  <entry>
    <title>Editing a commit message without git rebase</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-02-18-editing-a-commit-message-witho/"/>
    <id>https://blog.oddbit.com/post/2021-02-18-editing-a-commit-message-witho/</id>
    <published>2021-02-18T00:00:00Z</published>
    <updated>2021-02-18T00:00:00Z</updated>
    <summary type="html">While working on a pull request I will make liberal use of git rebase to clean up a series of commits: squashing typos, re-ordering changes for logical clarity, and so forth. But there are some times when all I want to do is change a commit message somewhere down the stack, and I was wondering if I had any options for doing that without reaching for git rebase.
It turns out the answer is &amp;ldquo;yes&amp;rdquo;, as long as you have a linear history.</summary>
  </entry>
  
  <entry>
    <title>Object storage with OpenShift Container Storage</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-02-10-object-storage-with-openshift/"/>
    <id>https://blog.oddbit.com/post/2021-02-10-object-storage-with-openshift/</id>
    <published>2021-02-10T00:00:00Z</published>
    <updated>2021-02-10T00:00:00Z</updated>
    <summary type="html">OpenShift Container Storage (OCS) from Red Hat deploys Ceph in your OpenShift cluster (or allows you to integrate with an external Ceph cluster). In addition to the file- and block- based volume services provided by Ceph, OCS includes two S3-api compatible object storage implementations.
The first option is the Ceph Object Gateway (radosgw), Ceph&amp;rsquo;s native object storage interface. The second option called the &amp;ldquo;Multicloud Object Gateway&amp;rdquo;, which is in fact a piece of software named Noobaa, a storage abstraction layer that was acquired by Red Hat in 2018.</summary>
  </entry>
  
  <entry>
    <title>Remediating poor PyPi performance with DevPi</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-02-08-remediating-poor-pypi-performa/"/>
    <id>https://blog.oddbit.com/post/2021-02-08-remediating-poor-pypi-performa/</id>
    <published>2021-02-08T00:00:00Z</published>
    <updated>2021-02-08T00:00:00Z</updated>
    <summary type="html">Performance of the primary PyPi service has been so bad lately that it&amp;rsquo;s become very disruptive. Tasks that used to take a few seconds will now churn along for 15-20 minutes or longer before completing, which is incredibly frustrating.
I first went looking to see if there was a PyPi mirror infrastructure, like we see with CPAN for Perl or CTAN for Tex (and similarly for most Linux distributions). There is apparently no such beast,</summary>
  </entry>
  
  <entry>
    <title>symtool: a tool for interacting with your SYM-1</title>
    <author>
      <name>Lars Kellogg-Stedman</name>
    </author>
    <link rel="alternate" href="https://blog.oddbit.com/post/2021-02-06-symtool-a-tool-for-interacting/"/>
    <id>https://blog.oddbit.com/post/2021-02-06-symtool-a-tool-for-interacting/</id>
    <published>2021-02-06T00:00:00Z</published>
    <updated>2021-02-06T00:00:00Z</updated>
    <summary type="html">The SYM-1 is a 6502-based single-board computer produced by Synertek Systems Corp in the mid 1970&amp;rsquo;s. I&amp;rsquo;ve had one floating around in a box for many, many years, and after a recent foray into the world of 6502 assembly language programming I decided to pull it out, dust it off, and see if it still works.
The board I have has a whopping 8KB of memory, and in addition to the standard SUPERMON monitor it has the expansion ROMs for the Synertek BASIC interpreter (yet another Microsoft BASIC) and RAE (the &amp;ldquo;Resident Assembler Editor&amp;rdquo;).</summary>
  </entry>
  
</feed>
